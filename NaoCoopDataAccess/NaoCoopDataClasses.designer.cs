#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NaoCoopDataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NaoCoopDb")]
	internal partial class NaoCoopDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExecutionRobot(ExecutionRobot instance);
    partial void UpdateExecutionRobot(ExecutionRobot instance);
    partial void DeleteExecutionRobot(ExecutionRobot instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertExecution(Execution instance);
    partial void UpdateExecution(Execution instance);
    partial void DeleteExecution(Execution instance);
    partial void InsertOperationRequirement(OperationRequirement instance);
    partial void UpdateOperationRequirement(OperationRequirement instance);
    partial void DeleteOperationRequirement(OperationRequirement instance);
    partial void InsertOperationRobot(OperationRobot instance);
    partial void UpdateOperationRobot(OperationRobot instance);
    partial void DeleteOperationRobot(OperationRobot instance);
    partial void InsertOperationRobotState(OperationRobotState instance);
    partial void UpdateOperationRobotState(OperationRobotState instance);
    partial void DeleteOperationRobotState(OperationRobotState instance);
    partial void InsertOperation(Operation instance);
    partial void UpdateOperation(Operation instance);
    partial void DeleteOperation(Operation instance);
    partial void InsertRequirement(Requirement instance);
    partial void UpdateRequirement(Requirement instance);
    partial void DeleteRequirement(Requirement instance);
    partial void InsertRobot(Robot instance);
    partial void UpdateRobot(Robot instance);
    partial void DeleteRobot(Robot instance);
    partial void InsertRobotVersion(RobotVersion instance);
    partial void UpdateRobotVersion(RobotVersion instance);
    partial void DeleteRobotVersion(RobotVersion instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertStateTask(StateTask instance);
    partial void UpdateStateTask(StateTask instance);
    partial void DeleteStateTask(StateTask instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    #endregion
		
		public NaoCoopDataClassesDataContext() : 
				base(global::NaoCoopDataAccess.Properties.Settings.Default.NaoCoopDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NaoCoopDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NaoCoopDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NaoCoopDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NaoCoopDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<ExecutionRobot> ExecutionRobots
		{
			get
			{
				return this.GetTable<ExecutionRobot>();
			}
		}
		
		internal System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		internal System.Data.Linq.Table<Execution> Executions
		{
			get
			{
				return this.GetTable<Execution>();
			}
		}
		
		internal System.Data.Linq.Table<OperationRequirement> OperationRequirements
		{
			get
			{
				return this.GetTable<OperationRequirement>();
			}
		}
		
		internal System.Data.Linq.Table<OperationRobot> OperationRobots
		{
			get
			{
				return this.GetTable<OperationRobot>();
			}
		}
		
		internal System.Data.Linq.Table<OperationRobotState> OperationRobotStates
		{
			get
			{
				return this.GetTable<OperationRobotState>();
			}
		}
		
		internal System.Data.Linq.Table<Operation> Operations
		{
			get
			{
				return this.GetTable<Operation>();
			}
		}
		
		internal System.Data.Linq.Table<Requirement> Requirements
		{
			get
			{
				return this.GetTable<Requirement>();
			}
		}
		
		internal System.Data.Linq.Table<Robot> Robots
		{
			get
			{
				return this.GetTable<Robot>();
			}
		}
		
		internal System.Data.Linq.Table<RobotVersion> RobotVersions
		{
			get
			{
				return this.GetTable<RobotVersion>();
			}
		}
		
		internal System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		internal System.Data.Linq.Table<StateTask> StateTasks
		{
			get
			{
				return this.GetTable<StateTask>();
			}
		}
		
		internal System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		internal System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExecutionRobots")]
	internal partial class ExecutionRobot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _FK_ExecutionID;
		
		private System.Guid _FK_RobotID;
		
		private EntityRef<Execution> _Execution;
		
		private EntityRef<Robot> _Robot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFK_ExecutionIDChanging(System.Guid value);
    partial void OnFK_ExecutionIDChanged();
    partial void OnFK_RobotIDChanging(System.Guid value);
    partial void OnFK_RobotIDChanged();
    #endregion
		
		public ExecutionRobot()
		{
			this._Execution = default(EntityRef<Execution>);
			this._Robot = default(EntityRef<Robot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ExecutionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_ExecutionID
		{
			get
			{
				return this._FK_ExecutionID;
			}
			set
			{
				if ((this._FK_ExecutionID != value))
				{
					if (this._Execution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ExecutionIDChanging(value);
					this.SendPropertyChanging();
					this._FK_ExecutionID = value;
					this.SendPropertyChanged("FK_ExecutionID");
					this.OnFK_ExecutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RobotID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_RobotID
		{
			get
			{
				return this._FK_RobotID;
			}
			set
			{
				if ((this._FK_RobotID != value))
				{
					if (this._Robot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RobotIDChanging(value);
					this.SendPropertyChanging();
					this._FK_RobotID = value;
					this.SendPropertyChanged("FK_RobotID");
					this.OnFK_RobotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_ExecutionRobot", Storage="_Execution", ThisKey="FK_ExecutionID", OtherKey="ID", IsForeignKey=true)]
		public Execution Execution
		{
			get
			{
				return this._Execution.Entity;
			}
			set
			{
				Execution previousValue = this._Execution.Entity;
				if (((previousValue != value) 
							|| (this._Execution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Execution.Entity = null;
						previousValue.ExecutionRobots.Remove(this);
					}
					this._Execution.Entity = value;
					if ((value != null))
					{
						value.ExecutionRobots.Add(this);
						this._FK_ExecutionID = value.ID;
					}
					else
					{
						this._FK_ExecutionID = default(System.Guid);
					}
					this.SendPropertyChanged("Execution");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Robot_ExecutionRobot", Storage="_Robot", ThisKey="FK_RobotID", OtherKey="ID", IsForeignKey=true)]
		public Robot Robot
		{
			get
			{
				return this._Robot.Entity;
			}
			set
			{
				Robot previousValue = this._Robot.Entity;
				if (((previousValue != value) 
							|| (this._Robot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Robot.Entity = null;
						previousValue.ExecutionRobots.Remove(this);
					}
					this._Robot.Entity = value;
					if ((value != null))
					{
						value.ExecutionRobots.Add(this);
						this._FK_RobotID = value.ID;
					}
					else
					{
						this._FK_RobotID = default(System.Guid);
					}
					this.SendPropertyChanged("Robot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	internal partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _FullName;
		
		private string _Username;
		
		private string _Password;
		
		private bool _IsAdmin;
		
		private EntitySet<Execution> _Executions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    #endregion
		
		public User()
		{
			this._Executions = new EntitySet<Execution>(new Action<Execution>(this.attach_Executions), new Action<Execution>(this.detach_Executions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Execution", Storage="_Executions", ThisKey="ID", OtherKey="FK_UserID")]
		public EntitySet<Execution> Executions
		{
			get
			{
				return this._Executions;
			}
			set
			{
				this._Executions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Executions(Execution entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Executions(Execution entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Executions")]
	internal partial class Execution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.DateTime _DateCreated;
		
		private System.Guid _FK_OperationID;
		
		private System.Guid _FK_UserID;
		
		private int _Status;
		
		private System.DateTime _DateStarted;
		
		private System.DateTime _DateCompleted;
		
		private EntitySet<ExecutionRobot> _ExecutionRobots;
		
		private EntityRef<User> _User;
		
		private EntityRef<Operation> _Operation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnFK_OperationIDChanging(System.Guid value);
    partial void OnFK_OperationIDChanged();
    partial void OnFK_UserIDChanging(System.Guid value);
    partial void OnFK_UserIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnDateStartedChanging(System.DateTime value);
    partial void OnDateStartedChanged();
    partial void OnDateCompletedChanging(System.DateTime value);
    partial void OnDateCompletedChanged();
    #endregion
		
		public Execution()
		{
			this._ExecutionRobots = new EntitySet<ExecutionRobot>(new Action<ExecutionRobot>(this.attach_ExecutionRobots), new Action<ExecutionRobot>(this.detach_ExecutionRobots));
			this._User = default(EntityRef<User>);
			this._Operation = default(EntityRef<Operation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_OperationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_OperationID
		{
			get
			{
				return this._FK_OperationID;
			}
			set
			{
				if ((this._FK_OperationID != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_OperationIDChanging(value);
					this.SendPropertyChanging();
					this._FK_OperationID = value;
					this.SendPropertyChanged("FK_OperationID");
					this.OnFK_OperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_UserID
		{
			get
			{
				return this._FK_UserID;
			}
			set
			{
				if ((this._FK_UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserIDChanging(value);
					this.SendPropertyChanging();
					this._FK_UserID = value;
					this.SendPropertyChanged("FK_UserID");
					this.OnFK_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStarted", DbType="DateTime NOT NULL")]
		public System.DateTime DateStarted
		{
			get
			{
				return this._DateStarted;
			}
			set
			{
				if ((this._DateStarted != value))
				{
					this.OnDateStartedChanging(value);
					this.SendPropertyChanging();
					this._DateStarted = value;
					this.SendPropertyChanged("DateStarted");
					this.OnDateStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCompleted", DbType="DateTime NOT NULL")]
		public System.DateTime DateCompleted
		{
			get
			{
				return this._DateCompleted;
			}
			set
			{
				if ((this._DateCompleted != value))
				{
					this.OnDateCompletedChanging(value);
					this.SendPropertyChanging();
					this._DateCompleted = value;
					this.SendPropertyChanged("DateCompleted");
					this.OnDateCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Execution_ExecutionRobot", Storage="_ExecutionRobots", ThisKey="ID", OtherKey="FK_ExecutionID")]
		public EntitySet<ExecutionRobot> ExecutionRobots
		{
			get
			{
				return this._ExecutionRobots;
			}
			set
			{
				this._ExecutionRobots.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Execution", Storage="_User", ThisKey="FK_UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Executions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Executions.Add(this);
						this._FK_UserID = value.ID;
					}
					else
					{
						this._FK_UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_Execution", Storage="_Operation", ThisKey="FK_OperationID", OtherKey="ID", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.Executions.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.Executions.Add(this);
						this._FK_OperationID = value.ID;
					}
					else
					{
						this._FK_OperationID = default(System.Guid);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExecutionRobots(ExecutionRobot entity)
		{
			this.SendPropertyChanging();
			entity.Execution = this;
		}
		
		private void detach_ExecutionRobots(ExecutionRobot entity)
		{
			this.SendPropertyChanging();
			entity.Execution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationRequirements")]
	internal partial class OperationRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _FK_OperationID;
		
		private System.Guid _FK_RequirementID;
		
		private string _Value;
		
		private string _ValueValidator;
		
		private EntityRef<Operation> _Operation;
		
		private EntityRef<Requirement> _Requirement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFK_OperationIDChanging(System.Guid value);
    partial void OnFK_OperationIDChanged();
    partial void OnFK_RequirementIDChanging(System.Guid value);
    partial void OnFK_RequirementIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnValueValidatorChanging(string value);
    partial void OnValueValidatorChanged();
    #endregion
		
		public OperationRequirement()
		{
			this._Operation = default(EntityRef<Operation>);
			this._Requirement = default(EntityRef<Requirement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_OperationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_OperationID
		{
			get
			{
				return this._FK_OperationID;
			}
			set
			{
				if ((this._FK_OperationID != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_OperationIDChanging(value);
					this.SendPropertyChanging();
					this._FK_OperationID = value;
					this.SendPropertyChanged("FK_OperationID");
					this.OnFK_OperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RequirementID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_RequirementID
		{
			get
			{
				return this._FK_RequirementID;
			}
			set
			{
				if ((this._FK_RequirementID != value))
				{
					if (this._Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RequirementIDChanging(value);
					this.SendPropertyChanging();
					this._FK_RequirementID = value;
					this.SendPropertyChanged("FK_RequirementID");
					this.OnFK_RequirementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueValidator", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ValueValidator
		{
			get
			{
				return this._ValueValidator;
			}
			set
			{
				if ((this._ValueValidator != value))
				{
					this.OnValueValidatorChanging(value);
					this.SendPropertyChanging();
					this._ValueValidator = value;
					this.SendPropertyChanged("ValueValidator");
					this.OnValueValidatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_OperationRequirement", Storage="_Operation", ThisKey="FK_OperationID", OtherKey="ID", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.OperationRequirements.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.OperationRequirements.Add(this);
						this._FK_OperationID = value.ID;
					}
					else
					{
						this._FK_OperationID = default(System.Guid);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requirement_OperationRequirement", Storage="_Requirement", ThisKey="FK_RequirementID", OtherKey="ID", IsForeignKey=true)]
		public Requirement Requirement
		{
			get
			{
				return this._Requirement.Entity;
			}
			set
			{
				Requirement previousValue = this._Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirement.Entity = null;
						previousValue.OperationRequirements.Remove(this);
					}
					this._Requirement.Entity = value;
					if ((value != null))
					{
						value.OperationRequirements.Add(this);
						this._FK_RequirementID = value.ID;
					}
					else
					{
						this._FK_RequirementID = default(System.Guid);
					}
					this.SendPropertyChanged("Requirement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationRobots")]
	internal partial class OperationRobot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _FK_OperationID;
		
		private System.Guid _FK_RobotVersion;
		
		private string _Name;
		
		private EntitySet<OperationRobotState> _OperationRobotStates;
		
		private EntityRef<Operation> _Operation;
		
		private EntityRef<RobotVersion> _RobotVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFK_OperationIDChanging(System.Guid value);
    partial void OnFK_OperationIDChanged();
    partial void OnFK_RobotVersionIDChanging(System.Guid value);
    partial void OnFK_RobotVersionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OperationRobot()
		{
			this._OperationRobotStates = new EntitySet<OperationRobotState>(new Action<OperationRobotState>(this.attach_OperationRobotStates), new Action<OperationRobotState>(this.detach_OperationRobotStates));
			this._Operation = default(EntityRef<Operation>);
			this._RobotVersion = default(EntityRef<RobotVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_OperationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_OperationID
		{
			get
			{
				return this._FK_OperationID;
			}
			set
			{
				if ((this._FK_OperationID != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_OperationIDChanging(value);
					this.SendPropertyChanging();
					this._FK_OperationID = value;
					this.SendPropertyChanged("FK_OperationID");
					this.OnFK_OperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RobotVersion", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_RobotVersionID
		{
			get
			{
				return this._FK_RobotVersion;
			}
			set
			{
				if ((this._FK_RobotVersion != value))
				{
					if (this._RobotVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RobotVersionIDChanging(value);
					this.SendPropertyChanging();
					this._FK_RobotVersion = value;
					this.SendPropertyChanged("FK_RobotVersionID");
					this.OnFK_RobotVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationRobot_OperationRobotState", Storage="_OperationRobotStates", ThisKey="ID", OtherKey="FK_OperationRobotID")]
		public EntitySet<OperationRobotState> OperationRobotStates
		{
			get
			{
				return this._OperationRobotStates;
			}
			set
			{
				this._OperationRobotStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_OperationRobot", Storage="_Operation", ThisKey="FK_OperationID", OtherKey="ID", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.OperationRobots.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.OperationRobots.Add(this);
						this._FK_OperationID = value.ID;
					}
					else
					{
						this._FK_OperationID = default(System.Guid);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RobotVersion_OperationRobot", Storage="_RobotVersion", ThisKey="FK_RobotVersionID", OtherKey="ID", IsForeignKey=true)]
		public RobotVersion RobotVersion
		{
			get
			{
				return this._RobotVersion.Entity;
			}
			set
			{
				RobotVersion previousValue = this._RobotVersion.Entity;
				if (((previousValue != value) 
							|| (this._RobotVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RobotVersion.Entity = null;
						previousValue.OperationRobots.Remove(this);
					}
					this._RobotVersion.Entity = value;
					if ((value != null))
					{
						value.OperationRobots.Add(this);
						this._FK_RobotVersion = value.ID;
					}
					else
					{
						this._FK_RobotVersion = default(System.Guid);
					}
					this.SendPropertyChanged("RobotVersion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OperationRobotStates(OperationRobotState entity)
		{
			this.SendPropertyChanging();
			entity.OperationRobot = this;
		}
		
		private void detach_OperationRobotStates(OperationRobotState entity)
		{
			this.SendPropertyChanging();
			entity.OperationRobot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationRobotStates")]
	internal partial class OperationRobotState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _FK_OperationRobotID;
		
		private System.Guid _FK_StateID;
		
		private int _Order;
		
		private EntitySet<Setting> _TaskSettings;
		
		private EntityRef<OperationRobot> _OperationRobot;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFK_OperationRobotIDChanging(System.Guid value);
    partial void OnFK_OperationRobotIDChanged();
    partial void OnFK_StateIDChanging(System.Guid value);
    partial void OnFK_StateIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public OperationRobotState()
		{
			this._TaskSettings = new EntitySet<Setting>(new Action<Setting>(this.attach_TaskSettings), new Action<Setting>(this.detach_TaskSettings));
			this._OperationRobot = default(EntityRef<OperationRobot>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_OperationRobotID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_OperationRobotID
		{
			get
			{
				return this._FK_OperationRobotID;
			}
			set
			{
				if ((this._FK_OperationRobotID != value))
				{
					if (this._OperationRobot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_OperationRobotIDChanging(value);
					this.SendPropertyChanging();
					this._FK_OperationRobotID = value;
					this.SendPropertyChanged("FK_OperationRobotID");
					this.OnFK_OperationRobotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_StateID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_StateID
		{
			get
			{
				return this._FK_StateID;
			}
			set
			{
				if ((this._FK_StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_StateIDChanging(value);
					this.SendPropertyChanging();
					this._FK_StateID = value;
					this.SendPropertyChanged("FK_StateID");
					this.OnFK_StateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationRobotState_Setting", Storage="_TaskSettings", ThisKey="ID", OtherKey="FK_OperationRobotStateID")]
		public EntitySet<Setting> Settings
		{
			get
			{
				return this._TaskSettings;
			}
			set
			{
				this._TaskSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationRobot_OperationRobotState", Storage="_OperationRobot", ThisKey="FK_OperationRobotID", OtherKey="ID", IsForeignKey=true)]
		public OperationRobot OperationRobot
		{
			get
			{
				return this._OperationRobot.Entity;
			}
			set
			{
				OperationRobot previousValue = this._OperationRobot.Entity;
				if (((previousValue != value) 
							|| (this._OperationRobot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationRobot.Entity = null;
						previousValue.OperationRobotStates.Remove(this);
					}
					this._OperationRobot.Entity = value;
					if ((value != null))
					{
						value.OperationRobotStates.Add(this);
						this._FK_OperationRobotID = value.ID;
					}
					else
					{
						this._FK_OperationRobotID = default(System.Guid);
					}
					this.SendPropertyChanged("OperationRobot");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_OperationRobotState", Storage="_State", ThisKey="FK_StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.OperationRobotStates.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.OperationRobotStates.Add(this);
						this._FK_StateID = value.ID;
					}
					else
					{
						this._FK_StateID = default(System.Guid);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskSettings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.OperationRobotState = this;
		}
		
		private void detach_TaskSettings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.OperationRobotState = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Operations")]
	internal partial class Operation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<Execution> _Executions;
		
		private EntitySet<OperationRequirement> _OperationRequirements;
		
		private EntitySet<OperationRobot> _OperationRobots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Operation()
		{
			this._Executions = new EntitySet<Execution>(new Action<Execution>(this.attach_Executions), new Action<Execution>(this.detach_Executions));
			this._OperationRequirements = new EntitySet<OperationRequirement>(new Action<OperationRequirement>(this.attach_OperationRequirements), new Action<OperationRequirement>(this.detach_OperationRequirements));
			this._OperationRobots = new EntitySet<OperationRobot>(new Action<OperationRobot>(this.attach_OperationRobots), new Action<OperationRobot>(this.detach_OperationRobots));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_Execution", Storage="_Executions", ThisKey="ID", OtherKey="FK_OperationID")]
		public EntitySet<Execution> Executions
		{
			get
			{
				return this._Executions;
			}
			set
			{
				this._Executions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_OperationRequirement", Storage="_OperationRequirements", ThisKey="ID", OtherKey="FK_OperationID")]
		public EntitySet<OperationRequirement> OperationRequirements
		{
			get
			{
				return this._OperationRequirements;
			}
			set
			{
				this._OperationRequirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_OperationRobot", Storage="_OperationRobots", ThisKey="ID", OtherKey="FK_OperationID")]
		public EntitySet<OperationRobot> OperationRobots
		{
			get
			{
				return this._OperationRobots;
			}
			set
			{
				this._OperationRobots.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Executions(Execution entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_Executions(Execution entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
		
		private void attach_OperationRequirements(OperationRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_OperationRequirements(OperationRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
		
		private void attach_OperationRobots(OperationRobot entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_OperationRobots(OperationRobot entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Requirements")]
	internal partial class Requirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Type;
		
		private EntitySet<OperationRequirement> _OperationRequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Requirement()
		{
			this._OperationRequirements = new EntitySet<OperationRequirement>(new Action<OperationRequirement>(this.attach_OperationRequirements), new Action<OperationRequirement>(this.detach_OperationRequirements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requirement_OperationRequirement", Storage="_OperationRequirements", ThisKey="ID", OtherKey="FK_RequirementID")]
		public EntitySet<OperationRequirement> OperationRequirements
		{
			get
			{
				return this._OperationRequirements;
			}
			set
			{
				this._OperationRequirements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OperationRequirements(OperationRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = this;
		}
		
		private void detach_OperationRequirements(OperationRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Robots")]
	internal partial class Robot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _IP;
		
		private int _Port;
		
		private bool _Enabled;
		
		private System.Guid _FK_RobotVersionID;
		
		private EntitySet<ExecutionRobot> _ExecutionRobots;
		
		private EntityRef<RobotVersion> _RobotVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnPortChanging(int value);
    partial void OnPortChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnFK_RobotVersionIDChanging(System.Guid value);
    partial void OnFK_RobotVersionIDChanged();
    #endregion
		
		public Robot()
		{
			this._ExecutionRobots = new EntitySet<ExecutionRobot>(new Action<ExecutionRobot>(this.attach_ExecutionRobots), new Action<ExecutionRobot>(this.detach_ExecutionRobots));
			this._RobotVersion = default(EntityRef<RobotVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="Int NOT NULL")]
		public int Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RobotVersionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_RobotVersionID
		{
			get
			{
				return this._FK_RobotVersionID;
			}
			set
			{
				if ((this._FK_RobotVersionID != value))
				{
					if (this._RobotVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RobotVersionIDChanging(value);
					this.SendPropertyChanging();
					this._FK_RobotVersionID = value;
					this.SendPropertyChanged("FK_RobotVersionID");
					this.OnFK_RobotVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Robot_ExecutionRobot", Storage="_ExecutionRobots", ThisKey="ID", OtherKey="FK_RobotID")]
		public EntitySet<ExecutionRobot> ExecutionRobots
		{
			get
			{
				return this._ExecutionRobots;
			}
			set
			{
				this._ExecutionRobots.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RobotVersion_Robot", Storage="_RobotVersion", ThisKey="FK_RobotVersionID", OtherKey="ID", IsForeignKey=true)]
		public RobotVersion RobotVersion
		{
			get
			{
				return this._RobotVersion.Entity;
			}
			set
			{
				RobotVersion previousValue = this._RobotVersion.Entity;
				if (((previousValue != value) 
							|| (this._RobotVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RobotVersion.Entity = null;
						previousValue.Robots.Remove(this);
					}
					this._RobotVersion.Entity = value;
					if ((value != null))
					{
						value.Robots.Add(this);
						this._FK_RobotVersionID = value.ID;
					}
					else
					{
						this._FK_RobotVersionID = default(System.Guid);
					}
					this.SendPropertyChanged("RobotVersion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExecutionRobots(ExecutionRobot entity)
		{
			this.SendPropertyChanging();
			entity.Robot = this;
		}
		
		private void detach_ExecutionRobots(ExecutionRobot entity)
		{
			this.SendPropertyChanging();
			entity.Robot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RobotVersions")]
	internal partial class RobotVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<OperationRobot> _OperationRobots;
		
		private EntitySet<Robot> _Robots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RobotVersion()
		{
			this._OperationRobots = new EntitySet<OperationRobot>(new Action<OperationRobot>(this.attach_OperationRobots), new Action<OperationRobot>(this.detach_OperationRobots));
			this._Robots = new EntitySet<Robot>(new Action<Robot>(this.attach_Robots), new Action<Robot>(this.detach_Robots));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RobotVersion_OperationRobot", Storage="_OperationRobots", ThisKey="ID", OtherKey="FK_RobotVersionID")]
		public EntitySet<OperationRobot> OperationRobots
		{
			get
			{
				return this._OperationRobots;
			}
			set
			{
				this._OperationRobots.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RobotVersion_Robot", Storage="_Robots", ThisKey="ID", OtherKey="FK_RobotVersionID")]
		public EntitySet<Robot> Robots
		{
			get
			{
				return this._Robots;
			}
			set
			{
				this._Robots.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OperationRobots(OperationRobot entity)
		{
			this.SendPropertyChanging();
			entity.RobotVersion = this;
		}
		
		private void detach_OperationRobots(OperationRobot entity)
		{
			this.SendPropertyChanging();
			entity.RobotVersion = null;
		}
		
		private void attach_Robots(Robot entity)
		{
			this.SendPropertyChanging();
			entity.RobotVersion = this;
		}
		
		private void detach_Robots(Robot entity)
		{
			this.SendPropertyChanging();
			entity.RobotVersion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	internal partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Type;
		
		private EntitySet<OperationRobotState> _OperationRobotStates;
		
		private EntitySet<StateTask> _StateTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public State()
		{
			this._OperationRobotStates = new EntitySet<OperationRobotState>(new Action<OperationRobotState>(this.attach_OperationRobotStates), new Action<OperationRobotState>(this.detach_OperationRobotStates));
			this._StateTasks = new EntitySet<StateTask>(new Action<StateTask>(this.attach_StateTasks), new Action<StateTask>(this.detach_StateTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_OperationRobotState", Storage="_OperationRobotStates", ThisKey="ID", OtherKey="FK_StateID")]
		public EntitySet<OperationRobotState> OperationRobotStates
		{
			get
			{
				return this._OperationRobotStates;
			}
			set
			{
				this._OperationRobotStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_StateTask", Storage="_StateTasks", ThisKey="ID", OtherKey="FK_StateID")]
		public EntitySet<StateTask> StateTasks
		{
			get
			{
				return this._StateTasks;
			}
			set
			{
				this._StateTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OperationRobotStates(OperationRobotState entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_OperationRobotStates(OperationRobotState entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_StateTasks(StateTask entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_StateTasks(StateTask entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateTasks")]
	internal partial class StateTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _FK_State;
		
		private System.Guid _FK_Task;
		
		private int _Order;
		
		private EntitySet<Setting> _TaskSettings;
		
		private EntityRef<State> _State;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFK_StateIDChanging(System.Guid value);
    partial void OnFK_StateIDChanged();
    partial void OnFK_TaskIDChanging(System.Guid value);
    partial void OnFK_TaskIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public StateTask()
		{
			this._TaskSettings = new EntitySet<Setting>(new Action<Setting>(this.attach_TaskSettings), new Action<Setting>(this.detach_TaskSettings));
			this._State = default(EntityRef<State>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_State", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_StateID
		{
			get
			{
				return this._FK_State;
			}
			set
			{
				if ((this._FK_State != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_StateIDChanging(value);
					this.SendPropertyChanging();
					this._FK_State = value;
					this.SendPropertyChanged("FK_StateID");
					this.OnFK_StateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Task", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FK_TaskID
		{
			get
			{
				return this._FK_Task;
			}
			set
			{
				if ((this._FK_Task != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_TaskIDChanging(value);
					this.SendPropertyChanging();
					this._FK_Task = value;
					this.SendPropertyChanged("FK_TaskID");
					this.OnFK_TaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateTask_Setting", Storage="_TaskSettings", ThisKey="ID", OtherKey="FK_StateTaskID")]
		public EntitySet<Setting> Settings
		{
			get
			{
				return this._TaskSettings;
			}
			set
			{
				this._TaskSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_StateTask", Storage="_State", ThisKey="FK_StateID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.StateTasks.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.StateTasks.Add(this);
						this._FK_State = value.ID;
					}
					else
					{
						this._FK_State = default(System.Guid);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_StateTask", Storage="_Task", ThisKey="FK_TaskID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.StateTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.StateTasks.Add(this);
						this._FK_Task = value.ID;
					}
					else
					{
						this._FK_Task = default(System.Guid);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskSettings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.StateTask = this;
		}
		
		private void detach_TaskSettings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.StateTask = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	internal partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Type;
		
		private EntitySet<StateTask> _StateTasks;
		
		private EntitySet<Setting> _TaskSettings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Task()
		{
			this._StateTasks = new EntitySet<StateTask>(new Action<StateTask>(this.attach_StateTasks), new Action<StateTask>(this.detach_StateTasks));
			this._TaskSettings = new EntitySet<Setting>(new Action<Setting>(this.attach_TaskSettings), new Action<Setting>(this.detach_TaskSettings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_StateTask", Storage="_StateTasks", ThisKey="ID", OtherKey="FK_TaskID")]
		public EntitySet<StateTask> StateTasks
		{
			get
			{
				return this._StateTasks;
			}
			set
			{
				this._StateTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Setting", Storage="_TaskSettings", ThisKey="ID", OtherKey="FK_TaskID")]
		public EntitySet<Setting> Settings
		{
			get
			{
				return this._TaskSettings;
			}
			set
			{
				this._TaskSettings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StateTasks(StateTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_StateTasks(StateTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_TaskSettings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskSettings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskSettings")]
	internal partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _FK_TaskID;
		
		private System.Nullable<System.Guid> _FK_StateTaskID;
		
		private System.Nullable<System.Guid> _FK_OperationRobotStateID;
		
		private string _Name;
		
		private string _Value;
		
		private EntityRef<OperationRobotState> _OperationRobotState;
		
		private EntityRef<StateTask> _StateTask;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFK_TaskIDChanging(System.Nullable<System.Guid> value);
    partial void OnFK_TaskIDChanged();
    partial void OnFK_StateTaskIDChanging(System.Nullable<System.Guid> value);
    partial void OnFK_StateTaskIDChanged();
    partial void OnFK_OperationRobotStateIDChanging(System.Nullable<System.Guid> value);
    partial void OnFK_OperationRobotStateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Setting()
		{
			this._OperationRobotState = default(EntityRef<OperationRobotState>);
			this._StateTask = default(EntityRef<StateTask>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_TaskID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FK_TaskID
		{
			get
			{
				return this._FK_TaskID;
			}
			set
			{
				if ((this._FK_TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_TaskIDChanging(value);
					this.SendPropertyChanging();
					this._FK_TaskID = value;
					this.SendPropertyChanged("FK_TaskID");
					this.OnFK_TaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_StateTaskID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FK_StateTaskID
		{
			get
			{
				return this._FK_StateTaskID;
			}
			set
			{
				if ((this._FK_StateTaskID != value))
				{
					if (this._StateTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_StateTaskIDChanging(value);
					this.SendPropertyChanging();
					this._FK_StateTaskID = value;
					this.SendPropertyChanged("FK_StateTaskID");
					this.OnFK_StateTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_OperationRobotStateID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FK_OperationRobotStateID
		{
			get
			{
				return this._FK_OperationRobotStateID;
			}
			set
			{
				if ((this._FK_OperationRobotStateID != value))
				{
					if (this._OperationRobotState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_OperationRobotStateIDChanging(value);
					this.SendPropertyChanging();
					this._FK_OperationRobotStateID = value;
					this.SendPropertyChanged("FK_OperationRobotStateID");
					this.OnFK_OperationRobotStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationRobotState_Setting", Storage="_OperationRobotState", ThisKey="FK_OperationRobotStateID", OtherKey="ID", IsForeignKey=true)]
		public OperationRobotState OperationRobotState
		{
			get
			{
				return this._OperationRobotState.Entity;
			}
			set
			{
				OperationRobotState previousValue = this._OperationRobotState.Entity;
				if (((previousValue != value) 
							|| (this._OperationRobotState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationRobotState.Entity = null;
						previousValue.Settings.Remove(this);
					}
					this._OperationRobotState.Entity = value;
					if ((value != null))
					{
						value.Settings.Add(this);
						this._FK_OperationRobotStateID = value.ID;
					}
					else
					{
						this._FK_OperationRobotStateID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OperationRobotState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateTask_Setting", Storage="_StateTask", ThisKey="FK_StateTaskID", OtherKey="ID", IsForeignKey=true)]
		public StateTask StateTask
		{
			get
			{
				return this._StateTask.Entity;
			}
			set
			{
				StateTask previousValue = this._StateTask.Entity;
				if (((previousValue != value) 
							|| (this._StateTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateTask.Entity = null;
						previousValue.Settings.Remove(this);
					}
					this._StateTask.Entity = value;
					if ((value != null))
					{
						value.Settings.Add(this);
						this._FK_StateTaskID = value.ID;
					}
					else
					{
						this._FK_StateTaskID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("StateTask");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Setting", Storage="_Task", ThisKey="FK_TaskID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Settings.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Settings.Add(this);
						this._FK_TaskID = value.ID;
					}
					else
					{
						this._FK_TaskID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
