<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bbv.Common.IO</name>
    </assembly>
    <members>
        <member name="T:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase">
            <summary>
            Base extension for directory access extensions.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.IDirectoryAccessExtension">
            <summary>
            Interface for directory access extensions
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginExists(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Exists(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndExists(System.Boolean,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Exists(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailExists(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Exists(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginCreateDirectory(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.CreateDirectory(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndCreateDirectory(System.IO.DirectoryInfo,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.CreateDirectory(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailCreateDirectory(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.CreateDirectory(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginCreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndCreateDirectory(System.IO.DirectoryInfo,System.String,System.Security.AccessControl.DirectorySecurity)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginDelete(System.String,System.Boolean)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Delete(System.String,System.Boolean)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndDelete(System.String,System.Boolean)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Delete(System.String,System.Boolean)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailDelete(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Delete(System.String,System.Boolean)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginDelete(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Delete(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndDelete(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Delete(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetFiles(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetFiles(System.String[],System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetFiles(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetFiles(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetFiles(System.String[],System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetFiles(System.String,System.String,System.IO.SearchOption)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String,System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetFiles(System.String[],System.String,System.String,System.IO.SearchOption)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String,System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetDirectories(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetDirectories(System.String[],System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetDirectories(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetDirectories(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetDirectories(System.String[],System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetDirectories(System.String,System.String,System.IO.SearchOption)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String,System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetDirectories(System.String[],System.String,System.String,System.IO.SearchOption)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String,System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetAccessControl(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetAccessControl(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetAccessControl(System.Security.AccessControl.DirectorySecurity,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetAccessControl(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetAccessControl(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetAccessControl(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetAccessControl(System.Security.AccessControl.DirectorySecurity,System.String,System.Security.AccessControl.AccessControlSections)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetCreationTime(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCreationTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetCreationTime(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCreationTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetCreationTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCreationTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetCreationTimeUtc(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCreationTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetCreationTimeUtc(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCreationTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetCreationTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCreationTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetCurrentDirectory">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCurrentDirectory"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetCurrentDirectory(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCurrentDirectory"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetCurrentDirectory(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetCurrentDirectory"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetDirectoryRoot(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectoryRoot(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetDirectoryRoot(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectoryRoot(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetDirectoryRoot(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetDirectoryRoot(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetFileSystemEntries(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFileSystemEntries(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetFileSystemEntries(System.String[],System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFileSystemEntries(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetFileSystemEntries(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFileSystemEntries(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetFileSystemEntries(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFileSystemEntries(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetFileSystemEntries(System.String[],System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetFileSystemEntries(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetLastAccessTime(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastAccessTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetLastAccessTime(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastAccessTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetLastAccessTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastAccessTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetLastAccessTimeUtc(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastAccessTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetLastAccessTimeUtc(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastAccessTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetLastAccessTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastAccessTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetLastWriteTime(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastWriteTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetLastWriteTime(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastWriteTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetLastWriteTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastWriteTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetLastWriteTimeUtc(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastWriteTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetLastWriteTimeUtc(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastWriteTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetLastWriteTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLastWriteTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetLogicalDrives">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLogicalDrives"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetLogicalDrives(System.String[])">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLogicalDrives"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetLogicalDrives(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetLogicalDrives"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginGetParent(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetParent(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndGetParent(System.IO.DirectoryInfo,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetParent(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailGetParent(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.GetParent(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginMove(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Move(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndMove(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Move(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailMove(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.Move(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginSetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndSetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailSetAccessControl(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginSetCreationTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCreationTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndSetCreationTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCreationTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailSetCreationTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCreationTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginSetCreationTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCreationTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndSetCreationTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCreationTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailSetCreationTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCreationTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginSetCurrentDirectory(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCurrentDirectory(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndSetCurrentDirectory(System.String)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCurrentDirectory(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailSetCurrentDirectory(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetCurrentDirectory(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginSetLastAccessTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastAccessTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndSetLastAccessTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastAccessTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailSetLastAccessTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastAccessTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginSetLastAccessTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastAccessTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndSetLastAccessTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastAccessTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailSetLastAccessTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastAccessTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginSetLastWriteTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastWriteTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndSetLastWriteTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastWriteTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailSetLastWriteTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastWriteTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.BeginSetLastWriteTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastWriteTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.EndSetLastWriteTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastWriteTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccessExtension.FailSetLastWriteTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IDirectoryAccess.SetLastWriteTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndExists(System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailExists(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginCreateDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndCreateDirectory(System.IO.DirectoryInfo,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailCreateDirectory(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginCreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndCreateDirectory(System.IO.DirectoryInfo,System.String,System.Security.AccessControl.DirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginDelete(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndDelete(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailDelete(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginDelete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndDelete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetFiles(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetFiles(System.String[],System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetFiles(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetFiles(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetFiles(System.String[],System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetFiles(System.String[],System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetDirectories(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetDirectories(System.String[],System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetDirectories(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetDirectories(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetDirectories(System.String[],System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetDirectories(System.String[],System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetAccessControl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetAccessControl(System.Security.AccessControl.DirectorySecurity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetAccessControl(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetAccessControl(System.Security.AccessControl.DirectorySecurity,System.String,System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetCreationTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetCreationTime(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetCreationTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetCreationTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetCreationTimeUtc(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetCreationTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetCurrentDirectory">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetCurrentDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetCurrentDirectory(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetDirectoryRoot(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetDirectoryRoot(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetDirectoryRoot(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetFileSystemEntries(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetFileSystemEntries(System.String[],System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetFileSystemEntries(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetFileSystemEntries(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetFileSystemEntries(System.String[],System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetLastAccessTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetLastAccessTime(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetLastAccessTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetLastAccessTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetLastAccessTimeUtc(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetLastAccessTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetLastWriteTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetLastWriteTime(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetLastWriteTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetLastWriteTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetLastWriteTimeUtc(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetLastWriteTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetLogicalDrives">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetLogicalDrives(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetLogicalDrives(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginGetParent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndGetParent(System.IO.DirectoryInfo,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailGetParent(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginMove(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndMove(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailMove(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginSetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndSetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailSetAccessControl(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginSetCreationTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndSetCreationTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailSetCreationTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginSetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndSetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailSetCreationTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginSetCurrentDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndSetCurrentDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailSetCurrentDirectory(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginSetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndSetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailSetLastAccessTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginSetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndSetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailSetLastAccessTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginSetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndSetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailSetLastWriteTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.BeginSetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.EndSetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.DirectoryAccessExtensionBase.FailSetLastWriteTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.Extensions.FileAccessExtensionBase">
            <summary>
            Base extension for file access extensions.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.IFileAccessExtension">
            <summary>
            Interface for file access extensions
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetLastWriteTime(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastWriteTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetLastWriteTime(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastWriteTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailGetLastWriteTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastWriteTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetLastWriteTimeUtc(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastWriteTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetLastWriteTimeUtc(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastWriteTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailGetLastWriteTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastWriteTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginMove(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Move(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndMove(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Move(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailMove(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Move(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginOpenRead(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenRead(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndOpenRead(System.IO.FileStream,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenRead(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailOpenRead(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenRead(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginOpenText(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndOpenText(System.IO.StreamReader,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailOpenText(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginOpenWrite(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenWrite(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndOpenWrite(System.IO.FileStream,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenWrite(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailOpenWrite(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.OpenWrite(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginReplace(System.String,System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Replace(System.String,System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndReplace(System.String,System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Replace(System.String,System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailReplace(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Replace(System.String,System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginReplace(System.String,System.String,System.String,System.Boolean)">
            <see cref="M:bbv.Common.IO.IFileAccess.Replace(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndReplace(System.String,System.String,System.String,System.Boolean)">
            <see cref="M:bbv.Common.IO.IFileAccess.Replace(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginSetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndSetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailSetAccessControl(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginSetCreationTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetCreationTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndSetCreationTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetCreationTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailSetCreationTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetCreationTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginSetCreationTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetCreationTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndSetCreationTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetCreationTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailSetCreationTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetCreationTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginSetLastAccessTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastAccessTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndSetLastAccessTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastAccessTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailSetLastAccessTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastAccessTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginSetLastAccessTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastAccessTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndSetLastAccessTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastAccessTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailSetLastAccessTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastAccessTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginSetLastWriteTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastWriteTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndSetLastWriteTimeUtc(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastWriteTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailSetLastWriteTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastWriteTimeUtc(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginDelete(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Delete(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndDelete(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Delete(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailDelete(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Delete(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginCopy(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Copy(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndCopy(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Copy(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailCopy(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Copy(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginCopy(System.String,System.String,System.Boolean)">
            <see cref="M:bbv.Common.IO.IFileAccess.Copy(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndCopy(System.String,System.String,System.Boolean)">
            <see cref="M:bbv.Common.IO.IFileAccess.Copy(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginCreateText(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.CreateText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndCreateText(System.IO.StreamWriter,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.CreateText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailCreateText(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.CreateText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetAttributes(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetAttributes(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetAttributes(System.IO.FileAttributes,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetAttributes(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailGetAttributes(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetAttributes(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginSetLastWriteTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastWriteTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndSetLastWriteTime(System.String,System.DateTime)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastWriteTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailSetLastWriteTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetLastWriteTime(System.String,System.DateTime)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginSetAttributes(System.String,System.IO.FileAttributes)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetAttributes(System.String,System.IO.FileAttributes)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndSetAttributes(System.String,System.IO.FileAttributes)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetAttributes(System.String,System.IO.FileAttributes)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailSetAttributes(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.SetAttributes(System.String,System.IO.FileAttributes)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginExists(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Exists(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndExists(System.Boolean,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Exists(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailExists(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Exists(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginReadAllBytes(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllBytes(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndReadAllBytes(System.Byte[],System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllBytes(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailReadAllBytes(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllBytes(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginReadAllLines(System.String,System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllLines(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndReadAllLines(System.String[],System.String,System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllLines(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailReadAllLines(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllLines(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginReadAllLines(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllLines(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndReadAllLines(System.String[],System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllLines(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginReadAllText(System.String,System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllText(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndReadAllText(System.String,System.String,System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllText(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailReadAllText(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllText(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginReadAllText(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndReadAllText(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.ReadAllText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginWriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndWriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailWriteAllLines(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginWriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndWriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginWriteAllText(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllText(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndWriteAllText(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllText(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailWriteAllText(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllText(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginWriteAllText(System.String,System.String,System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllText(System.String,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndWriteAllText(System.String,System.String,System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllText(System.String,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginWriteAllBytes(System.String,System.Byte[])">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllBytes(System.String,System.Collections.Generic.IEnumerable{System.Byte})"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndWriteAllBytes(System.String,System.Byte[])">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllBytes(System.String,System.Collections.Generic.IEnumerable{System.Byte})"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailWriteAllBytes(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.WriteAllBytes(System.String,System.Collections.Generic.IEnumerable{System.Byte})"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginOpen(System.String,System.IO.FileMode)">
            <see cref="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndOpen(System.IO.FileStream,System.String,System.IO.FileMode)">
            <see cref="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailOpen(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginOpen(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <see cref="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode,System.IO.FileAccess)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndOpen(System.IO.FileStream,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <see cref="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode,System.IO.FileAccess)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginOpen(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <see cref="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndOpen(System.IO.FileStream,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <see cref="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginAppendAllText(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.AppendAllText(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndAppendAllText(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.AppendAllText(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailAppendAllText(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.AppendAllText(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginAppendAllText(System.String,System.String,System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.AppendAllText(System.String,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndAppendAllText(System.String,System.String,System.Text.Encoding)">
            <see cref="M:bbv.Common.IO.IFileAccess.AppendAllText(System.String,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginAppendText(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.AppendText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndAppendText(System.IO.StreamWriter,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.AppendText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailAppendText(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.AppendText(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginCreate(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndCreate(System.IO.FileStream,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailCreate(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginCreate(System.String,System.Int32)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndCreate(System.IO.FileStream,System.String,System.Int32)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginCreate(System.String,System.Int32,System.IO.FileOptions)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32,System.IO.FileOptions)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndCreate(System.IO.FileStream,System.String,System.Int32,System.IO.FileOptions)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32,System.IO.FileOptions)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginCreate(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndCreate(System.IO.FileStream,System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <see cref="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginDecrypt(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Decrypt(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndDecrypt(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Decrypt(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailDecrypt(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Decrypt(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginEncrypt(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Encrypt(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndEncrypt(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.Encrypt(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailEncrypt(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.Encrypt(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetAccessControl(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetAccessControl(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetAccessControl(System.Security.AccessControl.FileSecurity,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetAccessControl(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailGetAccessControl(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetAccessControl(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetAccessControl(System.Security.AccessControl.FileSecurity,System.String,System.Security.AccessControl.AccessControlSections)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetCreationTime(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetCreationTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetCreationTime(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetCreationTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailGetCreationTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetCreationTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetCreationTimeUtc(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetCreationTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetCreationTimeUtc(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetCreationTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailGetCreationTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetCreationTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetLastAccessTime(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastAccessTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetLastAccessTime(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastAccessTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailGetLastAccessTime(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastAccessTime(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.BeginGetLastAccessTimeUtc(System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastAccessTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.EndGetLastAccessTimeUtc(System.DateTime,System.String)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastAccessTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IFileAccessExtension.FailGetLastAccessTimeUtc(System.Exception@)">
            <see cref="M:bbv.Common.IO.IFileAccess.GetLastAccessTimeUtc(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetLastWriteTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetLastWriteTime(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailGetLastWriteTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetLastWriteTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetLastWriteTimeUtc(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailGetLastWriteTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginMove(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndMove(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailMove(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginOpenRead(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndOpenRead(System.IO.FileStream,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailOpenRead(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginOpenText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndOpenText(System.IO.StreamReader,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailOpenText(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginOpenWrite(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndOpenWrite(System.IO.FileStream,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailOpenWrite(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginReplace(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndReplace(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailReplace(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginReplace(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndReplace(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginSetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndSetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailSetAccessControl(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginSetCreationTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndSetCreationTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailSetCreationTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginSetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndSetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailSetCreationTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginSetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndSetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailSetLastAccessTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginSetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndSetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailSetLastAccessTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginSetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndSetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailSetLastWriteTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginDelete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndDelete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailDelete(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginCopy(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndCopy(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailCopy(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginCopy(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndCopy(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginCreateText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndCreateText(System.IO.StreamWriter,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailCreateText(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetAttributes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetAttributes(System.IO.FileAttributes,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailGetAttributes(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginSetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndSetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailSetLastWriteTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginSetAttributes(System.String,System.IO.FileAttributes)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndSetAttributes(System.String,System.IO.FileAttributes)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailSetAttributes(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndExists(System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailExists(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginReadAllBytes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndReadAllBytes(System.Byte[],System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailReadAllBytes(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginReadAllLines(System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndReadAllLines(System.String[],System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailReadAllLines(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginReadAllLines(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndReadAllLines(System.String[],System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginReadAllText(System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndReadAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginReadAllText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndReadAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailReadAllText(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginWriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndWriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailWriteAllLines(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginWriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndWriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginWriteAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndWriteAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailWriteAllText(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginWriteAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndWriteAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginWriteAllBytes(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndWriteAllBytes(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailWriteAllBytes(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginOpen(System.String,System.IO.FileMode)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndOpen(System.IO.FileStream,System.String,System.IO.FileMode)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailOpen(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginOpen(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndOpen(System.IO.FileStream,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginOpen(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndOpen(System.IO.FileStream,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginAppendAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndAppendAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailAppendAllText(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginAppendAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndAppendAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginAppendText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndAppendText(System.IO.StreamWriter,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailAppendText(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginCreate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndCreate(System.IO.FileStream,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailCreate(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginCreate(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndCreate(System.IO.FileStream,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginCreate(System.String,System.Int32,System.IO.FileOptions)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndCreate(System.IO.FileStream,System.String,System.Int32,System.IO.FileOptions)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginCreate(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndCreate(System.IO.FileStream,System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginDecrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndDecrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailDecrypt(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginEncrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndEncrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailEncrypt(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetAccessControl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetAccessControl(System.Security.AccessControl.FileSecurity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailGetAccessControl(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetAccessControl(System.Security.AccessControl.FileSecurity,System.String,System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetCreationTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetCreationTime(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailGetCreationTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetCreationTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetCreationTimeUtc(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailGetCreationTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetLastAccessTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetLastAccessTime(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailGetLastAccessTime(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.BeginGetLastAccessTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.EndGetLastAccessTimeUtc(System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.FileAccessExtensionBase.FailGetLastAccessTimeUtc(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.Extensions.PathAccessExtensionBase">
            <summary>
            Base extension for path access extensions.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.IPathAccessExtension">
            <summary>
            Interface for path access extensions
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetDirectoryName(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetDirectoryName(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetDirectoryName(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetDirectoryName(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetDirectoryName(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetDirectoryName(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetFileName(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFileName(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetFileName(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFileName(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetFileName(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFileName(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetFileNameWithoutExtension(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFileNameWithoutExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetFileNameWithoutExtension(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFileNameWithoutExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetFileNameWithoutExtension(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFileNameWithoutExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginCombine(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.Combine(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndCombine(System.String,System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.Combine(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailCombine(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.Combine(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetRandomFileName">
            <see cref="M:bbv.Common.IO.IPathAccess.GetRandomFileName"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetRandomFileName(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetRandomFileName"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetRandomFileName(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetRandomFileName"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginChangeExtension(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.ChangeExtension(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndChangeExtension(System.String,System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.ChangeExtension(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailChangeExtension(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.ChangeExtension(System.String,System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetExtension(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetExtension(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetExtension(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetFullPath(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFullPath(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetFullPath(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFullPath(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetFullPath(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetFullPath(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetInvalidFileNameChars">
            <see cref="M:bbv.Common.IO.IPathAccess.GetInvalidFileNameChars"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetInvalidFileNameChars(System.Char[])">
            <see cref="M:bbv.Common.IO.IPathAccess.GetInvalidFileNameChars"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetInvalidFileNameChars(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetInvalidFileNameChars"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetInvalidPathChars">
            <see cref="M:bbv.Common.IO.IPathAccess.GetInvalidPathChars"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetInvalidPathChars(System.Char[])">
            <see cref="M:bbv.Common.IO.IPathAccess.GetInvalidPathChars"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetInvalidPathChars(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetInvalidPathChars"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetPathRoot(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetPathRoot(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetPathRoot(System.String,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetPathRoot(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetPathRoot(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetPathRoot(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetTempFileName">
            <see cref="M:bbv.Common.IO.IPathAccess.GetTempFileName"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetTempFileName(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetTempFileName"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetTempFileName(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetTempFileName"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginGetTempPath">
            <see cref="M:bbv.Common.IO.IPathAccess.GetTempPath"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndGetTempPath(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetTempPath"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailGetTempPath(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.GetTempPath"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginHasExtension(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.HasExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndHasExtension(System.Boolean,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.HasExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailHasExtension(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.HasExtension(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.BeginIsPathRooted(System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.IsPathRooted(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.EndIsPathRooted(System.Boolean,System.String)">
            <see cref="M:bbv.Common.IO.IPathAccess.IsPathRooted(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.IPathAccessExtension.FailIsPathRooted(System.Exception@)">
            <see cref="M:bbv.Common.IO.IPathAccess.IsPathRooted(System.String)"/>
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetDirectoryName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetDirectoryName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetDirectoryName(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetFileName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetFileName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetFileName(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetFileNameWithoutExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetFileNameWithoutExtension(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetFileNameWithoutExtension(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginCombine(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndCombine(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailCombine(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetRandomFileName">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetRandomFileName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetRandomFileName(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginChangeExtension(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndChangeExtension(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailChangeExtension(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetExtension(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetExtension(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetFullPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetFullPath(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetFullPath(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetInvalidFileNameChars">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetInvalidFileNameChars(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetInvalidFileNameChars(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetInvalidPathChars">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetInvalidPathChars(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetInvalidPathChars(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetPathRoot(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetPathRoot(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetPathRoot(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetTempFileName">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetTempFileName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetTempFileName(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginGetTempPath">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndGetTempPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailGetTempPath(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginHasExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndHasExtension(System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailHasExtension(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.BeginIsPathRooted(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.EndIsPathRooted(System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Extensions.PathAccessExtensionBase.FailIsPathRooted(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.FileActionExecutedEventArgs">
            <summary>
            Defines the EventArgs used fro event <see cref="E:bbv.Common.IO.FileActionCommand.FileActionExecuted"/>
            </summary>
        </member>
        <member name="M:bbv.Common.IO.FileActionExecutedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileActionExecutedEventArgs"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:bbv.Common.IO.FileActionExecutedEventArgs.FileName">
            <summary>
            Gets the name of the file tha has been processed.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.FileActionExecutedEventHandler">
            <summary>
            Delegate for <see cref="E:bbv.Common.IO.FileActionCommand.FileActionExecuted"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:bbv.Common.IO.FileActionExecutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:bbv.Common.IO.FileCopy">
            <summary>
            Copies files recursivly
            </summary>
            <example>
            Normally use static method on <see cref="M:bbv.Common.IO.FileActionCommand.CopyRecursiv(System.String,System.String,System.Boolean)"/>:
            <code>
            FileActionCommand.FileCopy(sourcePath, searchPattern, excludeDirs, destinationPath, overwrite);
            </code>
            In special cases you may use:
            <code>
            FileCopy fc = new FileCopy(sourcePath, searchPattern, excludeDirs, destinationPath, overwrite);
            fc.ExecuteRecursiv(sourcePath);
            </code>
            </example>
        </member>
        <member name="T:bbv.Common.IO.FileActionCommand">
            <summary>
            Base class for recursive file actions. The action is executed for each file in the source path.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileActionCommand"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start the action.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.#ctor(System.String,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileActionCommand"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start the action.</param>
            <param name="excludeDirs">Directories to exclude from action.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileActionCommand"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start the action.</param>
            <param name="searchPattern">Only files that match this pattern are taken for the command.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.#ctor(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileActionCommand"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start the action.</param>
            <param name="searchPattern">Only files that match this pattern are taken for the command.</param>
            <param name="excludeDirs">Directories to exclude from action.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.MoveRecursiv(System.String,System.String)">
            <summary>
            Moves files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="destinationPath">Destination Path</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.MoveRecursiv(System.String,System.String,System.String)">
            <summary>
            Moves files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="searchPattern">Only files that match this pattern are taken for the command.</param>
            <param name="destinationPath">Destination Path</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.MoveRecursiv(System.String,System.Collections.ArrayList,System.String)">
            <summary>
            Moves files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="excludeDirs">Directories to exclude from move.</param>
            <param name="destinationPath">Destination Path</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.MoveRecursiv(System.String,System.String,System.Collections.ArrayList,System.String)">
            <summary>
            Moves files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="searchPattern">Only files that match this pattern are taken for the command.</param>
            <param name="excludeDirs">Directories to exclude from move.</param>
            <param name="destinationPath">Destination Path</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.CopyRecursiv(System.String,System.String,System.Boolean)">
            <summary>
            Copy files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to copy.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.CopyRecursiv(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copy files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to copy.</param>
            <param name="searchPattern">Only files that match this pattern are copied.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.CopyRecursiv(System.String,System.Collections.ArrayList,System.String,System.Boolean)">
            <summary>
            Copy files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to copy.</param>
            <param name="excludeDirs">Directories to exclude from copy.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.CopyRecursiv(System.String,System.String,System.Collections.ArrayList,System.String,System.Boolean)">
            <summary>
            Copy files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to copy.</param>
            <param name="searchPattern">Only files that match this pattern are copied.</param>
            <param name="excludeDirs">Directories to exclude from copy.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.NumberOfDirsAndFiles(System.String)">
            <summary>
            Count files and directories recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to count.</param>
            <returns>Returns number of files an directories in directory tree.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.NumberOfDirsAndFiles(System.String,System.String)">
            <summary>
            Count files and directories recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to count.</param>
            <param name="searchPattern">Only files that match this pattern are counted.</param>
            <returns>Returns number of files an directories in directory tree.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.NumberOfDirsAndFiles(System.String,System.Collections.ArrayList)">
            <summary>
            Count files and directories recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to count.</param>
            <param name="excludeDirs">Directories to exclude from count.</param>
            <returns>Returns number of files an directories in directory tree.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.NumberOfDirsAndFiles(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Count files and directories recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to count.</param>
            <param name="searchPattern">Only files that match this pattern are counted.</param>
            <param name="excludeDirs">Directories to exclude from count.</param>
            <returns>Returns number of files an directories in directory tree.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetFilesRecursiv(System.String)">
            <summary>
            Gets files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to get.</param>
            <returns>Returns an arraylist of filenames.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetFilesRecursiv(System.String,System.String)">
            <summary>
            Gets files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to get.</param>
            <param name="searchPattern">Only files that match this pattern are getted.</param>
            <returns>Returns an arraylist of filenames.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetFilesRecursiv(System.String,System.Collections.ArrayList)">
            <summary>
            Gets files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to get.</param>
            <param name="excludeDirs">Directories to exclude from get.</param>
            <returns>Returns an arraylist of filenames.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetFilesRecursiv(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Gets files recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to get.</param>
            <param name="searchPattern">Only files that match this pattern are getted.</param>
            <param name="excludeDirs">Directories to exclude from get.</param>
            <returns>Returns an arraylist of filenames.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetSizeRecursiv(System.String)">
            <summary>
            Gets file size recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to calculate filesize.</param>
            <returns>Returns size of directory tree.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetSizeRecursiv(System.String,System.String)">
            <summary>
            Gets file size recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to calculate filesize.</param>
            <param name="searchPattern">Only files that match this pattern are counted.</param>
            <returns>Returns size of directory tree.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetSizeRecursiv(System.String,System.Collections.ArrayList)">
            <summary>
            Gets file size recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to calculate filesize.</param>
            <param name="excludeDirs">Directories to exclude from filesize.</param>
            <returns>Returns size of directory tree.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetSizeRecursiv(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Gets file size recursively.
            </summary>
            <param name="sourcePath">Source Path at which to start to calculate filesize.</param>
            <param name="searchPattern">Only files that match this pattern are counted.</param>
            <param name="excludeDirs">Directories to exclude from filesize.</param>
            <returns>Returns size of directory tree.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.FileAction(System.String)">
            <summary>
            Override this method to execute the action.
            </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.ExecuteRecursiv(System.String)">
            <summary>
            Called for each file in the source path and each underling directory <see cref="M:bbv.Common.IO.FileActionCommand.FileAction(System.String)"/>.
            This is the recursive method.
            </summary>
            <param name="path">The full path..</param>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.GetDiffPath(System.String,System.String)">
            <summary>
            Returns the difference between the to given path.
            </summary>
            <param name="path">The path to compare against.</param>
            <param name="filename">The filename.</param>
            <returns>The path difference.</returns>
        </member>
        <member name="M:bbv.Common.IO.FileActionCommand.OnFileActionExecuted(System.String)">
            <summary>
            Fires <see cref="E:bbv.Common.IO.FileActionCommand.FileActionExecuted"/> event.
            </summary>
            <param name="fileName">Name of the file that has been processed.</param>
        </member>
        <member name="E:bbv.Common.IO.FileActionCommand.FileActionExecuted">
            <summary>
            This event is fired after FileAction has completed a file.
            </summary>
        </member>
        <member name="P:bbv.Common.IO.FileActionCommand.IgnoreLockedFiles">
            <summary>
            Gets or sets a value indicating whether to ignore locked files or not. If locked files are not ignored, an exception is thrown.
            </summary>
        </member>
        <member name="P:bbv.Common.IO.FileActionCommand.SourcePath">
            <summary>
            Gets or sets the Source Path at which to start the action.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.FileCopy.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileCopy"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden.</param>
        </member>
        <member name="M:bbv.Common.IO.FileCopy.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileCopy"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="searchPattern">Only files that match this pattern are taken for the command.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden.</param>
        </member>
        <member name="M:bbv.Common.IO.FileCopy.#ctor(System.String,System.Collections.ArrayList,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileCopy"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="excludeDirs">Directories to exclude from move.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden.</param>
        </member>
        <member name="M:bbv.Common.IO.FileCopy.#ctor(System.String,System.String,System.Collections.ArrayList,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileCopy"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="searchPattern">Only files that match this pattern are taken for the command.</param>
            <param name="excludeDirs">Directories to exclude from move.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden.</param>
        </member>
        <member name="M:bbv.Common.IO.FileCopy.FileAction(System.String)">
            <summary>
            Copies the given file to destination path.
            </summary>
            <param name="fileName">File to copy.</param>
        </member>
        <member name="T:bbv.Common.IO.FileGetter">
            <summary>
            Gets all files inside a directory tree.
            </summary>
            <example>
            Normally use static method <see cref="M:bbv.Common.IO.FileActionCommand.GetFilesRecursiv(System.String)"/>:
            <code>
            ArrayList files = FileActionCommand.GetFilesRecursiv(sourcePath, searchPattern, excludeDirs);
            </code>
            In special cases you may use:
            <code>
            FileGetter fg = new FileGetter(sourcePath, searchPattern, excludeDirs);
            fg.ExecuteRecursiv(sourcePath);
            ArrayList files = fg.Files;
            </code>
            </example>
        </member>
        <member name="M:bbv.Common.IO.FileGetter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileGetter"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileGetter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileGetter"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="searchPattern">
            Only files that match this pattern are taken for the command.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileGetter.#ctor(System.String,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileGetter"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileGetter.#ctor(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileGetter"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="searchPattern">
            Only files that match this pattern are taken for the command.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileGetter.FileAction(System.String)">
            <summary>
            Called each time a file is found.
            </summary>
            <param name="fileName">Found file</param>
        </member>
        <member name="P:bbv.Common.IO.FileGetter.Files">
            <summary>
            Gets all fiels in the tree.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.FileMove">
            <summary>
            Moves files recursivly
            </summary>
            <example>
            Normally use static method on <see cref="M:bbv.Common.IO.FileActionCommand.MoveRecursiv(System.String,System.String)"/>:
            <code>
            FileActionCommand.FileMove(sourcePath, searchPattern, excludeDirs, destinationPath);
            </code>
            In special cases you may use:
            <code>
            FileMove fm = new FileMove(sourcePath, searchPattern, excludeDirs, destinationPath);
            fm.ExecuteRecursiv(sourcePath);
            </code>
            </example>
        </member>
        <member name="M:bbv.Common.IO.FileMove.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileMove"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
            <param name="destinationPath">Destination Path</param>
            <param name="overwrite">True if existing files should be overriden. Default is false.</param>
        </member>
        <member name="M:bbv.Common.IO.FileMove.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileMove"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="destinationPath">
            Destination Path
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileMove.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileMove"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="searchPattern">
            Only files that match this pattern are moved.
            </param>
            <param name="destinationPath">
            Destination Path
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileMove.#ctor(System.String,System.Collections.ArrayList,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileMove"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
            <param name="destinationPath">
            Destination Path
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileMove.#ctor(System.String,System.Collections.ArrayList,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileMove"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
            <param name="destinationPath">
            Destination Path
            </param>
            <param name="overwrite">
            True if existing files should be overriden.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileMove.#ctor(System.String,System.String,System.Collections.ArrayList,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileMove"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="searchPattern">
            Only files that match this pattern are taken for the command.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
            <param name="destinationPath">
            Destination Path
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileMove.FileAction(System.String)">
            <summary>
            Moves the given file to destination path.
            </summary>
            <param name="fileName">File to move.</param>
        </member>
        <member name="M:bbv.Common.IO.FileMove.FileAction(System.String,System.String@)">
            <summary>
            Moves the given file to destination path.
            </summary>
            <param name="fileName">File to move.</param>
            <param name="destinationFilePath">Path of the moved file (new).</param>
        </member>
        <member name="P:bbv.Common.IO.FileMove.DestinationPath">
            <summary>
            Gets or sets the destination path
            </summary>
        </member>
        <member name="T:bbv.Common.IO.FileSize">
            <summary>
            Calculates size of a directory tree.
            </summary>
            <example>
            Normally use static method on <see cref="M:bbv.Common.IO.FileActionCommand.GetSizeRecursiv(System.String)"/>:
            <code>
            int size = FileActionCommand.FileSize(sourcePath, searchPattern, excludeDirs);
            </code>
            In special cases you may use:
            <code>
            FileSize fs = new FileSize(sourcePath, searchPattern, excludeDirs);
            fs.ExecuteRecursiv(sourcePath);
            int size = fs.Size;
            </code>
            </example>
        </member>
        <member name="M:bbv.Common.IO.FileSize.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileSize"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileSize.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileSize"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="searchPattern">
            Only files that match this pattern are taken for the command.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileSize.#ctor(System.String,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileSize"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileSize.#ctor(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FileSize"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="searchPattern">
            Only files that match this pattern are taken for the command.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
        </member>
        <member name="M:bbv.Common.IO.FileSize.FileAction(System.String)">
            <summary>
            Adds size the given file.
            </summary>
            <param name="fileName">Found file</param>
        </member>
        <member name="P:bbv.Common.IO.FileSize.Size">
            <summary>
            Gets size of the directory tree.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.IDirectoryAccess">
            <summary>
            Abstraction layer which simplifies access to directories.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary><returns>true if <paramref name="path"/> refers to an existing directory; otherwise, false.</returns><param name="path">The path to test. </param><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.CreateDirectory(System.String)">
            <summary>Creates all directories and subdirectories as specified by <paramref name="path"/>.</summary><returns>A <see cref="T:System.IO.DirectoryInfo"/> as specified by <paramref name="path"/>.</returns><param name="path">The directory path to create. </param><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or-<paramref name="path"/> is prefixed with, or contains only a colon character (:).</exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates all the directories in the specified path, applying the specified Windows security.</summary><returns>A <see cref="T:System.IO.DirectoryInfo"/> object representing the newly created directory.</returns><param name="path">The directory to create.</param><param name="directorySecurity">The access control to apply to the directory.</param><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. -or-<paramref name="path"/> is prefixed with, or contains only a colon character (:).</exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary><param name="path">The name of the directory to remove. </param><param name="recursive">true to remove directories, subdirectories, and files in <paramref name="path"/>; otherwise, false. </param><exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path"/> exists.-or-The directory specified by <paramref name="path"/> is read-only, or <paramref name="recursive"/> is false and <paramref name="path"/> is not an empty directory.-or-The directory is the application's current working directory. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or-The directory contains a read-only file.</exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary><param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param><exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path"/> exists.-or-The directory is the application's current working directory.-or-The directory specified by <paramref name="path"/> is not empty.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. -or-The directory contains a read-only file.</exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String)">
            <summary>Returns the names of files in the specified directory.</summary><returns>A String array of file names in the specified directory.</returns><param name="path">The directory from which to retrieve the files. </param><exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String,System.String)">
            <summary>Returns the names of files in the specified directory that match the specified search pattern.</summary><returns>A String array containing the names of files in the specified directory that match the specified search pattern.</returns><param name="path">The directory to search. </param><param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars"/>. </param><exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of files in the specified directory that match the specified search pattern, using a value to determine whether to search subdirectories.</summary><returns>A String array containing the names of files in the specified directory that match the specified search pattern. File names include the full path.</returns><param name="path">The directory to search. </param><param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars"/>. </param><param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> values that specifies whether the search operation should include all subdirectories or only the current directory.</param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. -or- <paramref name="searchPattern"/> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchpattern"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name.-or-A network error has occurred. </exception>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String)">
            <summary>Gets the names of subdirectories in the specified directory.</summary><returns>An array of the names of subdirectories in <paramref name="path"/>.</returns><param name="path">The path for which an array of subdirectory names is returned. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String,System.String)">
            <summary>Gets an array of directories matching the specified search pattern from the current directory.</summary><returns>A String array of directories that match the search pattern.</returns><param name="path">The path to search. </param><param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars"/>. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of directories matching the specified search pattern from the current directory, using a value to determine whether to search subdirectories.</summary><returns>A String array of directories that match the search pattern.</returns><param name="path">The path to search. </param><param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars"/>. </param><param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> values that specifies whether the search operation should include all subdirectories or only the current directory.</param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for a specified directory.</summary><returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns><param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param><exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception><exception cref="T:System.SystemException">The directory could not be found.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</summary><returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns><param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param><param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param><exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception><exception cref="T:System.SystemException">The directory could not be found.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of a directory.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns><param name="path">The path of the directory. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns><param name="path">The path of the directory. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetCurrentDirectory">
            <summary>Gets the current working directory of the application.</summary><returns>A string containing the path of the current working directory.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary><returns>A string containing the volume information, root information, or both for the specified path.</returns><param name="path">The path of a file or directory. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary><returns>An array that contains the names of files and subdirectories in the specified directory.</returns><param name="path">The directory for which file and subdirectory names are returned. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file system entries that match the specified search criteria.</summary><returns>An array of file system entries that match the search criteria.</returns><param name="path">The path to be searched. </param><param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>. The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="F:System.IO.Path.InvalidPathChars"/>. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="searchPattern"/> does not contain a valid pattern. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> or <paramref name="searchPattern"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.IOException">
        <paramref name="path"/> is a file name. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns><param name="path">The file or directory for which to obtain access date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns><param name="path">The file or directory for which to obtain access date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns><param name="path">The file or directory for which to obtain modification date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns><param name="path">The file or directory for which to obtain modification date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary><returns>The logical drives on this computer.</returns><exception cref="T:System.IO.IOException">An I/O error occured (for example, a disk error). </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary><returns>The parent directory, or null if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns><param name="path">The path for which to retrieve the parent directory. </param><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path"/> is read-only. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary><param name="sourceDirName">The path of the file or directory to move. </param><param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>. If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file name.</param><exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- <paramref name="destDirName"/> already exists. -or- The <paramref name="sourceDirName"/> and <paramref name="destDirName"/> parameters refer to the same file or directory. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="sourceDirName"/> or <paramref name="destDirName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirName"/> or <paramref name="destDirName"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName"/> is invalid (for example, it is on an unmapped drive). </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary><param name="path">A directory to add or remove access control list (ACL) entries from.</param><param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the <paramref name="path"/> parameter.</param><exception cref="T:System.ArgumentNullException">The <paramref name="directorySecurity"/> parameter is null.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory could not be found.</exception><exception cref="T:System.ArgumentException">The <paramref name="path"/> was invalid.</exception><exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.- or -The current process does not have sufficient privilege to set the ACL entry.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows 2000 or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the creation date and time for the specified file or directory.</summary><param name="path">The file or directory for which to set the creation date and time information. </param><param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time. </param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary><param name="path">The file or directory for which to set the creation date and time information. </param><param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time. </param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.SetCurrentDirectory(System.String)">
            <summary>Sets the application's current working directory to the specified directory.</summary><param name="path">The path to which the current working directory is set. </param><exception cref="T:System.IO.IOException">An I/O error occurred. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code. </exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to set the access date and time information. </param><param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the access date and time of <paramref name="path"/>. This value is expressed in local time. </param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to set the access date and time information. </param><param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the access date and time of <paramref name="path"/>. This value is expressed in UTC time. </param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time a directory was last written to.</summary><param name="path">The path of the directory. </param><param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time. </param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryAccess.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary><param name="path">The path of the directory. </param><param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time. </param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="T:bbv.Common.IO.IDirectoryInfoAccess">
            <summary>
            Interface which simplifies the access to the directory info.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.IFileSystemInfoAccess">
            <summary>
            Base interface definition for file system information access.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IFileSystemInfoAccess.Refresh">
            <summary>Refreshes the state of the object.</summary><exception cref="T:System.IO.IOException">A device such as a disk drive is not ready. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IFileSystemInfoAccess.Delete">
            <summary>Deletes a file or directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.Attributes">
            <summary>Gets or sets the attributes for the current file or directory.</summary><returns>
        <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:System.IO.FileSystemInfo"/>.</returns><exception cref="T:System.IO.FileNotFoundException">The specified file does not exist. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute. </exception><exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.CreationTime">
            <summary>Gets or sets the creation time of the current file or directory.</summary><returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns><exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.CreationTimeUtc">
            <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary><returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo"/> object.</returns><exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary><returns>true if the file or directory exists; otherwise, false.</returns><filterpriority>1</filterpriority>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.FullName">
            <summary>Gets the full path of the directory or file.</summary><returns>A string containing the full path.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.Name">
            <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary><returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns><filterpriority>1</filterpriority>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.Extension">
            <summary>Gets the string representing the extension part of the file.</summary><returns>A string containing the <see cref="T:System.IO.FileSystemInfo"/> extension.</returns><filterpriority>1</filterpriority>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.LastAccessTime">
            <summary>Gets or sets the time the current file or directory was last accessed.</summary><returns>The time that the current file or directory was last accessed.</returns><exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.LastAccessTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary><returns>The UTC time that the current file or directory was last accessed.</returns><exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.LastWriteTime">
            <summary>Gets or sets the time when the current file or directory was last written to.</summary><returns>The time the current file was last written.</returns><exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileSystemInfoAccess.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary><returns>The UTC time when the current file was last written to.</returns><exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot initialize the data. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IDirectoryInfoAccess.Create">
            <summary>
            Creates a directory.
            </summary>
            <exception cref="T:System.IO.IOException">The directory cannot be created.</exception>
        </member>
        <member name="P:bbv.Common.IO.IDirectoryInfoAccess.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
            <value>The parent directory, or null if the path is null or if the file path
            denotes a root (such as "\", "C:", or * "\\server\share").</value>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required
            permission.</exception>
        </member>
        <member name="P:bbv.Common.IO.IDirectoryInfoAccess.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
            <value>A <see cref="T:bbv.Common.IO.IDirectoryInfoAccess"/> object representing the root of a path.</value>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required
            permission.</exception>
        </member>
        <member name="T:bbv.Common.IO.IDriveInfoAccess">
            <summary>
            Interface which simplifies the access to directory info.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IDriveInfoAccess.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives on a computer.
            </summary>
            <returns>An enumerable of type <see cref="T:bbv.Common.IO.IDriveInfoAccess"/> that represents the logical drives on a computer.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:bbv.Common.IO.IDriveInfoAccess.AvailableFreeSpace">
            <summary>
            Gets the amount of available free space on a drive.
            </summary>
            <value>The amount of free space available on the drive, in bytes.</value>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:bbv.Common.IO.IDriveInfoAccess.DriveFormat">
            <summary>
            Gets the name of the file system, such as NTFS or FAT32.
            </summary>
            <value>Provides access to information on a drive.</value>
        </member>
        <member name="P:bbv.Common.IO.IDriveInfoAccess.DriveType">
            <summary>
            Gets the drive type.
            </summary>
            <value>One of the <see cref="P:bbv.Common.IO.IDriveInfoAccess.DriveType"/> values.</value>
        </member>
        <member name="P:bbv.Common.IO.IDriveInfoAccess.IsReady">
            <summary>
            Gets a value indicating whether a drive is ready.
            </summary>
            <value><see langword="true"/> if the drive is ready; 
            <see langword="false"/> if the drive is not ready.</value>
        </member>
        <member name="P:bbv.Common.IO.IDriveInfoAccess.RootDirectory">
            <summary>
            Gets the root directory of a drive.
            </summary>
            <value>An <see cref="T:bbv.Common.IO.IDirectoryInfoAccess"/> object that contains the
            root directory of the drive.</value>
        </member>
        <member name="P:bbv.Common.IO.IDriveInfoAccess.TotalFreeSpace">
            <summary>
            Gets the total amount of free space available on a drive.
            </summary>
            <value>The total free space available on a drive, in bytes.</value>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:bbv.Common.IO.IDriveInfoAccess.TotalSize">
            <summary>
            Gets the total size of storage space on a drive.
            </summary>
            <value>The total size of the drive, in bytes.</value>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:bbv.Common.IO.IDriveInfoAccess.Name">
            <summary>
            Gets the name of a drive.
            </summary>
            <value>The name of the drive.</value>
        </member>
        <member name="T:bbv.Common.IO.IFileAccess">
            <summary>
            Interface which simplifies the access to the file system.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Delete(System.String)">
            <summary>Deletes the specified file. An exception is not thrown if the specified file does not exist.</summary><param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">The specified file is in use. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> is a directory.-or- <paramref name="path"/> specified a read-only file. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Copy(System.String,System.String)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary><param name="sourceFileName">The file to copy. </param><param name="destFileName">The name of the destination file. This cannot be a directory or an existing file. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception><exception cref="T:System.IO.IOException">
        <paramref name="destFileName"/> exists.-or- An I/O error has occurred. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Copy(System.String,System.String,System.Boolean)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary><param name="sourceFileName">The file to copy. </param><param name="destFileName">The name of the destination file. This cannot be a directory. </param><param name="overwrite">true if the destination file can be overwritten; otherwise, false. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. -or-<paramref name="destFileName"/> is read-only.</exception><exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception><exception cref="T:System.IO.IOException">
        <paramref name="destFileName"/> exists and <paramref name="overwrite"/> is false.-or- An I/O error has occurred. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.CreateText(System.String)">
            <summary>Creates or opens a file for writing UTF-8 encoded text.</summary><returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns><param name="path">The file to be opened for writing. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary><returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns><param name="path">The path to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, or contains invalid characters. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="path"/> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found. </exception><exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path"/> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last written to.</summary><param name="path">The file for which to set the date and time information. </param><param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.</summary><param name="path">The path to the file. </param><param name="fileAttributes">The desired <see cref="T:System.IO.FileAttributes"/>, such as Hidden, ReadOnly, Normal, and Archive. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Exists(System.String)">
            <summary>Determines whether the specified file exists.</summary><returns>true if the caller has the required permissions and <paramref name="path"/> contains the name of an existing file; otherwise, false. This method also returns false if <paramref name="path"/> is null, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of <paramref name="path"/>.</returns><param name="path">The file to check. </param><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.ReadAllBytes(System.String)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary><returns>A byte array containing the contents of the file.</returns><param name="path">The file to open for reading. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary><returns>A string array containing all lines of the file.</returns><param name="path">The file to open for reading. </param><param name="encoding">The encoding applied to the contents of the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.ReadAllLines(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary><returns>A string array containing all lines of the file.</returns><param name="path">The file to open for reading. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.ReadAllText(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary><returns>A string containing all lines of the file.</returns><param name="path">The file to open for reading. </param><param name="encoding">The encoding applied to the contents of the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.ReadAllText(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary><returns>A string containing all lines of the file.</returns><param name="path">The file to open for reading. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file. </summary><param name="path">The file to write to. </param><param name="contents">The string array to write to the file. </param><param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is null.  </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates a new file, write the specified string array to the file, and then closes the file. </summary><param name="path">The file to write to. </param><param name="contents">The string array to write to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is null.  </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.WriteAllText(System.String,System.String)">
            <summary>Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to. </param><param name="contents">The string to write to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null or <paramref name="contents"/> is empty.  </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to. </param><param name="contents">The string to write to the file. </param><param name="encoding">The encoding to apply to the string.</param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null or <paramref name="contents"/> is empty. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.WriteAllBytes(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to. </param><param name="bytes">The bytes to write to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null or the byte array is empty. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary><returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns><param name="path">The file to open. </param><param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> specified an invalid value. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary><returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns><param name="path">The file to open. </param><param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param><param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="access"/> specified Read and <paramref name="mode"/> specified Create, CreateNew, Truncate, or Append. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not Read.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/> or <paramref name="access"/> specified an invalid value. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary><returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns><param name="path">The file to open. </param><param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param><param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file. </param><param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.-or- <paramref name="access"/> specified Read and <paramref name="mode"/> specified Create, CreateNew, Truncate, or Append. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only and <paramref name="access"/> is not Read.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. -or-<paramref name="mode"/> is <see cref="F:System.IO.FileMode.Create"/> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode"/>, <paramref name="access"/>, or <paramref name="share"/> specified an invalid value. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.AppendAllText(System.String,System.String)">
            <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary><param name="path">The file to append the specified string to. </param><param name="contents">The string to append to the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Appends the specified string to the file, creating the file if it does not already exist.</summary><param name="path">The file to append the specified string to. </param><param name="contents">The string to append to the file. </param><param name="encoding">The character encoding to use. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.AppendText(System.String)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</summary><returns>A StreamWriter that appends UTF-8 encoded text to an existing file.</returns><param name="path">The path to the file to append to. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Create(System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary><returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns><param name="path">The path and name of the file to create. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32)">
            <summary>Creates or overwrites the specified file.</summary><returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <paramref name="path"/>.</returns><param name="path">The name of the file. </param><param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>Creates or overwrites the specified file, specifying a buffer size and a <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.</summary><returns>A new file with the specified buffer size.</returns><param name="path">The name of the file. </param><param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param><param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. -or-<see cref="F:System.IO.FileOptions.Encrypted"/> is specified for <paramref name="options"/> and file encryption is not supported on the current platform.</exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive. </exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>Creates or overwrites the specified file with the specified buffer size, file options, and file security.</summary><returns>A new file with the specified buffer size, file options, and file security.</returns><param name="path">The name of the file. </param><param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param><param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param><param name="fileSecurity">One of the <see cref="T:System.Security.AccessControl.FileSecurity"/> values that determines the access control and audit security for the file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only.-or-<see cref="F:System.IO.FileOptions.Encrypted"/> is specified for <paramref name="options"/> and file encryption is not supported on the current platform. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a file that is read-only. </exception>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Decrypt(System.String)">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.File.Encrypt(System.String)"/> method.</summary><param name="path">A path that describes a file to decrypt.</param><exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception><exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path"/> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. For example, the encrypted file is already open. -or-This operation is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Encrypt(System.String)">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary><param name="path">A path that describes a file to encrypt.</param><exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="path"/> parameter is null.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception><exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path"/> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.-or-This operation is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary><returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns><param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception><exception cref="T:System.SystemException">The file could not be found.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</summary><returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.     </returns><param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param><param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception><exception cref="T:System.SystemException">The file could not be found.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetCreationTime(System.String)">
            <summary>Returns the creation date and time of the specified file or directory.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns><param name="path">The file or directory for which to obtain creation date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetCreationTimeUtc(System.String)">
            <summary>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns><param name="path">The file or directory for which to obtain creation date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns><param name="path">The file or directory for which to obtain access date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns><param name="path">The file or directory for which to obtain access date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns><param name="path">The file or directory for which to obtain write date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</summary><returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</returns><param name="path">The file or directory for which to obtain write date and time information. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Move(System.String,System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="sourceFileName">The name of the file to move. </param><param name="destFileName">The new path for the file. </param><exception cref="T:System.IO.IOException">The destination file already exists. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName"/> was not found. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.OpenRead(System.String)">
            <summary>Opens an existing file for reading.</summary><returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns><param name="path">The file to be opened for reading. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.OpenText(System.String)">
            <summary>Opens an existing UTF-8 encoded text file for reading.</summary><returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns><param name="path">The file to be opened for reading. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.OpenWrite(System.String)">
            <summary>Opens an existing file for writing.</summary><returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns><param name="path">The file to be opened for writing. </param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path"/> specified a read-only file or directory. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path"/> was not found. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Replace(System.String,System.String,System.String)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</summary><param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param><param name="destinationFileName">The name of the file being replaced.</param><param name="destinationBackupFileName">The name of the backup file.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destinationBackupFileName"/> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName"/> parameter is null.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationBackupFileName"/> parameter could not be found. </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.- or -The <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> parameters specify the same file.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> parameter specifies a file that is read-only.-or- This operation is not supported on the current platform.-or- Source or destination parameters specify a directory instead of a file.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</summary><param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param><param name="destinationFileName">The name of the file being replaced.</param><param name="destinationBackupFileName">The name of the backup file.</param><param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, false. </param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destinationBackupFileName"/> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName"/> parameter is null.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationBackupFileName"/> parameter could not be found. </exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.- or -The <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> parameters specify the same file.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName"/> or <paramref name="destinationFileName"/> parameter specifies a file that is read-only.-or- This operation is not supported on the current platform.-or- Source or destination parameters specify a directory instead of a file.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the specified file.</summary><param name="path">A file to add or remove access control list (ACL) entries from.</param><param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.Runtime.InteropServices.SEHException">The <paramref name="path"/> parameter is null.</exception><exception cref="T:System.SystemException">The file could not be found.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path"/> parameter specified a file that is read-only.-or- This operation is not supported on the current platform.-or- The <paramref name="path"/> parameter specified a directory.-or- The caller does not have the required permission.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="fileSecurity"/> parameter is null.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.</summary><param name="path">The file for which to set the creation date and time information. </param><param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time. </param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary><param name="path">The file for which to set the creation date and time information. </param><param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time. </param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationTime"/> specifies a value outside the range of dates, times, or both permitted for this operation. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file was last accessed.</summary><param name="path">The file for which to set the access date and time information. </param><param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary><param name="path">The file for which to set the access date and time information. </param><param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileAccess.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary><param name="path">The file for which to set the date and time information. </param><param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> is in an invalid format. </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="T:bbv.Common.IO.IFileInfoAccess">
            <summary>
            Interface which simplifies the access to the file info.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.AppendText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo"/>.</summary><returns>A new StreamWriter.</returns><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.CopyTo(System.String)">
            <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary><returns>A new file with a fully qualified path.</returns><param name="destFileName">The name of the new file to copy to. </param><exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception><exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception><exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) within the string but does not specify the volume. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.CopyTo(System.String,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="mscorlib.xml" path="/doc/members/member[@name=&quot;M:System.IO.FileInfo.CopyTo(System.String, System.Boolean)&quot;]/*"/>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.Create">
            <summary>Creates a file.</summary><returns>A new file.</returns><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.CreateText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that writes a new text file.</summary><returns>A new StreamWriter.</returns><exception cref="T:System.UnauthorizedAccessException">The file name is a directory. </exception><exception cref="T:System.IO.IOException">The disk is read-only. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.Decrypt">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.FileInfo.Encrypt"/> method.</summary><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.Encrypt">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileInfo"/> object.</summary><returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the current file.</returns><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception><exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system account does not have administrative privileges.</exception><exception cref="T:System.SystemException">The file could not be found.</exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileInfo"/> object.</summary><returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the current file.     </returns><param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies which group of access control entries to retrieve. </param><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception><exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system account does not have administrative privileges.</exception><exception cref="T:System.SystemException">The file could not be found.</exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.MoveTo(System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="destFileName">The path to move the file to, which can specify a different file name. </param><exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName"/> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destFileName"/> is read-only or is a directory. </exception><exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="destFileName"/> contains a colon (:) in the middle of the string. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.Open(System.IO.FileMode)">
            <summary>Opens a file in the specified mode.</summary><returns>A file opened in the specified mode, with read/write access and unshared.</returns><param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param><exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception><exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.IOException">The file is already open. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a file in the specified mode with read, write, or read/write access.</summary><returns>A <see cref="T:System.IO.FileStream"/> object opened in the specified mode and access, and unshared.</returns><param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param><param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty or contains only white spaces. </exception><exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception><exception cref="T:System.ArgumentNullException">One or more arguments is null. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.IOException">The file is already open. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary><returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns><param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file. </param><param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param><param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other FileStream objects have to this file. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is empty or contains only white spaces. </exception><exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception><exception cref="T:System.ArgumentNullException">One or more arguments is null. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.IOException">The file is already open. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.OpenRead">
            <summary>Creates a read-only <see cref="T:System.IO.FileStream"/>.</summary><returns>A new read-only <see cref="T:System.IO.FileStream"/> object.</returns><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.IOException">The file is already open. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.OpenText">
            <summary>Creates a <see cref="T:System.IO.StreamReader"/> with UTF8 encoding that reads from an existing text file.</summary><returns>A new StreamReader with UTF8 encoding.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.OpenWrite">
            <summary>Creates a write-only <see cref="T:System.IO.FileStream"/>.</summary><returns>A new write-only unshared <see cref="T:System.IO.FileStream"/> object.</returns><exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path"/> is read-only or is a directory. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.Replace(System.String,System.String)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.</summary><returns>A <see cref="T:System.IO.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destFileName"/> parameter.</returns><param name="destinationFileName">The name of a file to replace with the current file.</param><param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName"/> parameter.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destBackupFileName"/> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destFileName"/> parameter is null.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationFileName"/> parameter could not be found. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.Replace(System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors. </summary><returns>A <see cref="T:System.IO.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destFileName"/> parameter.</returns><param name="destinationFileName">The name of a file to replace with the current file.</param><param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName"/> parameter.</param><param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false. </param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName"/> parameter was not of a legal form.-or-The path described by the <paramref name="destBackupFileName"/> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destFileName"/> parameter is null.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.-or-The file described by the <paramref name="destinationFileName"/> parameter could not be found. </exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><filterpriority>2</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IFileInfoAccess.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the file described by the current <see cref="T:System.IO.FileInfo"/> object.</summary><param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an access control list (ACL) entry to apply to the current file.</param><exception cref="T:System.ArgumentNullException">The <paramref name="fileSecurity"/> parameter is null.</exception><exception cref="T:System.SystemException">The file could not be found or modified.</exception><exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileInfoAccess.Directory">
            <summary>Gets an instance of the parent directory.</summary><returns>A <see cref="T:System.IO.DirectoryInfo"/> object representing the parent directory of this file.</returns><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileInfoAccess.DirectoryName">
            <summary>Gets a string representing the directory's full path.</summary><returns>A string representing the directory's full path.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception><exception cref="T:System.ArgumentNullException">null was passed in for the directory name. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="P:bbv.Common.IO.IFileInfoAccess.IsReadOnly">
            <summary>Gets or sets a value that determines if the current file is read only.</summary><returns>true if the current file is read only; otherwise, false.</returns><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"/> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"/> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:bbv.Common.IO.IFileInfoAccess.Length">
            <summary>Gets the size, in bytes, of the current file.</summary><returns>The size of the current file in bytes.</returns><exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh"/> cannot update the state of the file or directory. </exception><exception cref="T:System.IO.FileNotFoundException">The file does not exist.-or- The Length property is called for a directory. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="T:bbv.Common.IO.IFolderWatcherExtension">
            <summary>
            Extension for <see cref="T:bbv.Common.IO.IFolderWatcher"/>.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcherExtension.ObservationStarted(System.String,System.String)">
            <summary>
            Called when observation was started.
            </summary>
            <param name="folder">The folder.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcherExtension.ObservationStopped(System.String,System.String)">
            <summary>
            Called when observation was stopped.
            </summary>
            <param name="folder">The folder.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcherExtension.FileAddedOrChanged(System.String,System.String,System.String)">
            <summary>
            Called when a changed or added file is detected.
            </summary>
            <param name="folder">The folder.</param>
            <param name="filter">The filter.</param>
            <param name="path">The path of the file.</param>
        </member>
        <member name="T:bbv.Common.IO.IIOAccessFactory">
            <summary>
            Factory interface for factories which are responsible to create IO access
            components.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreateDirectoryAccess">
            <summary>
            Creates the directory access layer.
            </summary>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IDirectoryAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreateFileAccess">
            <summary>
            Creates the file access layer.
            </summary>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IFileAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreatePathAccess">
            <summary>
            Creates the path access layer.
            </summary>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IPathAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreateFileInfo(System.IO.FileInfo)">
            <summary>
            Creates the file info access.
            </summary>
            <param name="fileInfo">The file info.</param>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IFileInfoAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreateFileInfo(System.String)">
            <summary>
            Creates the file info access.
            </summary>
            <param name="pathToFile">The file path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pathToFile"/> is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required
            permission.</exception>
            <exception cref="T:System.ArgumentException">The file name is empty, contains only white
            spaces, or contains invalid characters.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access to 
            <paramref name="pathToFile"/> is denied.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both
            exceed the system-defined maximum length. For example, on Windows-based
            platforms, paths must be less than 248 characters, and file names must be less
            than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="pathToFile"/> contains
            a colon (:) in the middle of the string.</exception>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IFileInfoAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreateDirectoryInfo(System.IO.DirectoryInfo)">
            <summary>
            Creates the directory info access.
            </summary>
            <param name="directoryInfo">The directory info.</param>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IDirectoryInfoAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreateDirectoryInfo(System.String)">
            <summary>
            Creates the directory info access.
            </summary>
            <param name="pathToDirectory">The directory path.</param>
            <exception cref="T:System.ArgumentNullException">path is null.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required
            permission.</exception>
            <exception cref="T:System.ArgumentException">path contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both
            exceed the system-defined maximum length. For example, on Windows-based
            platforms, paths must be less than 248 characters, and file names must be less
            than 260 characters. The specified path, file name, or both are too long.
            </exception>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IDirectoryInfoAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreateDriveInfo(System.IO.DriveInfo)">
            <summary>
            Creates the drive info.
            </summary>
            <param name="driveInfo">The drive info.</param>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IDriveInfoAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.CreateDriveInfo(System.String)">
            <summary>
            Creates the drive info access.
            </summary>
            <param name="driveName">A valid drive path or drive letter. This can be either
            uppercase or lowercase, 'a' to 'z'. A null value is not valid.</param>
            <exception cref="T:System.ArgumentNullException">The drive letter cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">The first letter of 
            <paramref name="driveName"/> is not an uppercase or lowercase letter from 'a'
            to 'z'.  -or- 
            <paramref name="driveName"/> does not refer to a valid drive.</exception>
            <returns>An instance implementing <see cref="T:bbv.Common.IO.IDriveInfoAccess"/>.</returns>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.RegisterFileAccessExtensionsProvider(System.Func{System.Collections.Generic.IEnumerable{bbv.Common.IO.IFileAccessExtension}})">
            <summary>
            Registers an extensions provider for file access extensions. The extensions provider is called on each
            CreateFileAccess request.
            </summary>
            <param name="extensionsProvider">The file access extension provider</param>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.RegisterDirectoryAccessExtensionsProvider(System.Func{System.Collections.Generic.IEnumerable{bbv.Common.IO.IDirectoryAccessExtension}})">
            <summary>
            Registers an extensions provider for directory access extensions. The extensions provider is called on each
            CreateDirectoryAccess request.
            </summary>
            <param name="extensionsProvider">The directory access extension provider</param>
        </member>
        <member name="M:bbv.Common.IO.IIOAccessFactory.RegisterPathAccessExtensionsProvider(System.Func{System.Collections.Generic.IEnumerable{bbv.Common.IO.IPathAccessExtension}})">
            <summary>
            Registers an extensions provider for path access extensions. The extensions provider is called on each
            CreatePathAccess request.
            </summary>
            <param name="extensionsProvider">The path access extension provider</param>
        </member>
        <member name="T:bbv.Common.IO.Internals.ExtensionProviderExtensions">
            <summary>
            The extension provider extensions greatly simplify the way how calls are intercepted with extensions.
            By using a simple set of conventions the correct extension points are automatically found on the extensions.
            The conventions are the following:
            1) Methods which return void
            i.e. File.Delete(string path) the extension must provide the following three methods:
            - BeginDelete(string path)
            - EndDelete(string path)
            - FailDelete(ref Exception exception)
            2) Methods which return a result
            i.e. File.Exists(string path) the extension must provide the following three methods:
            - BeginExists(string path)
            - EndExists(bool result, string path)
            - FailExists(ref Exception exception)
            </summary>
        </member>
        <member name="M:bbv.Common.IO.Internals.ExtensionProviderExtensions.SurroundWithExtension``2(bbv.Common.IO.Internals.IExtensionProvider{``0},System.Linq.Expressions.Expression{System.Func{``1}},System.Object[])">
            <summary>
            Surrounds the specified function expression with extension methods following a certain convention.
            </summary>
            <typeparam name="TExtension">The type of the extension.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="provider">The provider.</param>
            <param name="function">The function expression.</param>
            <param name="args">The arguments.</param>
            <returns>The result of the function expression.</returns>
        </member>
        <member name="M:bbv.Common.IO.Internals.ExtensionProviderExtensions.SurroundWithExtension``1(bbv.Common.IO.Internals.IExtensionProvider{``0},System.Linq.Expressions.Expression{System.Action},System.Object[])">
            <summary>
            Surrounds the specified action expression with extension methods following a certain convention.
            </summary>
            <typeparam name="TExtension">The type of the extension.</typeparam>
            <param name="provider">The provider.</param>
            <param name="action">The action expression.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.ExtensionProviderExtensions.ClearCache">
            <summary>
            Clears the reflection cache.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.Internals.IExtensionProvider`1">
            <summary>
            Provides extensions to process.
            </summary>
            <typeparam name="TExtension">The type of the extension.</typeparam>
        </member>
        <member name="P:bbv.Common.IO.Internals.IExtensionProvider`1.Extensions">
            <summary>
            Gets the extensions.
            </summary>
            <value>The extensions.</value>
        </member>
        <member name="T:bbv.Common.IO.IObserveFolder">
            <summary>
            Allows to observe a given folder for just one file change.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IObserveFolder.Start(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Starts the observation on the given folder with the specified filter. When a file changed in the observed folder
            the observation is stopped and the file's path is returned as result of the task.
            </summary>
            <param name="folder">The folder to be observed.</param>
            <param name="filter">The filter to be used.</param>
            <param name="cancellationToken">The cancellation token which allows to stop the observation.</param>
            <returns>The fully qualified path to the changed file.</returns>
        </member>
        <member name="T:bbv.Common.IO.IPathAccess">
            <summary>
            Abstraction layer which simplifies access to paths.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetDirectoryName(System.String)">
            <summary>Returns the directory information for the specified path string.</summary><returns>A <see cref="T:System.String"/> containing directory information for <paramref name="path"/>, or null if <paramref name="path"/> denotes a root directory, is the empty string (""), or is null. Returns <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain directory information.</returns><param name="path">The path of a file or directory. </param><exception cref="T:System.ArgumentException">The <paramref name="path"/> parameter contains invalid characters, is empty, or contains only white spaces. </exception><exception cref="T:System.IO.PathTooLongException">The <paramref name="path"/> parameter is longer than the system-defined maximum length.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetFileName(System.String)">
            <summary>Returns the file name and extension of the specified path string.</summary><returns>A <see cref="T:System.String"/> consisting of the characters after the last directory character in <paramref name="path"/>. If the last character of <paramref name="path"/> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, this method returns null.</returns><param name="path">The path string from which to obtain the file name and extension. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetFileNameWithoutExtension(System.String)">
            <summary>Returns the file name of the specified path string without the extension.</summary><returns>A <see cref="T:System.String"/> containing the string returned by <see cref="M:System.IO.Path.GetFileName(System.String)"/>, minus the last period (.) and all characters following it.</returns><param name="path">The path of the file. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.Combine(System.String,System.String)">
            <summary>Combines two strings into a path.</summary><returns>A string that contains the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2"/> contains an absolute path, this method returns <paramref name="path2"/>.</returns><param name="path1">The first path to combine. </param><param name="path2">The second path to combine. </param><exception cref="T:System.ArgumentException">
        <paramref name="path1"/> or <paramref name="path2"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path1"/> or <paramref name="path2"/> is null. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetRandomFileName">
            <summary>Returns a random folder name or file name.</summary><returns>A random folder name or file name.</returns>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.ChangeExtension(System.String,System.String)">
            <summary>Changes the extension of a path string.</summary><returns>A string containing the modified path information.On Windows-based desktop platforms, if <paramref name="path"/> is null or an empty string (""), the path information is returned unmodified. If <paramref name="extension"/> is null, the returned string contains the specified path with its extension removed. If <paramref name="path"/> has no extension, and <paramref name="extension"/> is not null, the returned path string contains <paramref name="extension"/> appended to the end of <paramref name="path"/>.</returns><param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </param><param name="extension">The new extension (with or without a leading period). Specify null to remove an existing extension from <paramref name="path"/>. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetExtension(System.String)">
            <summary>Returns the extension of the specified path string.</summary><returns>A <see cref="T:System.String"/> containing the extension of the specified path (including the "."), null, or <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, GetExtension returns null. If <paramref name="path"/> does not have extension information, GetExtension returns Empty.</returns><param name="path">The path string from which to get the extension. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.  </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetFullPath(System.String)">
            <summary>Returns the absolute path for the specified path string.</summary><returns>A string containing the fully qualified location of <paramref name="path"/>, such as "C:\MyFile.txt".</returns><param name="path">The file or directory for which to obtain absolute path information. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- The system could not retrieve the absolute path. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\"). </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetInvalidFileNameChars">
            <summary>Gets an array containing the characters that are not allowed in file names.</summary><returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetInvalidPathChars">
            <summary>Gets an array containing the characters that are not allowed in path names.</summary><returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetPathRoot(System.String)">
            <summary>Gets the root directory information of the specified path.</summary><returns>A string containing the root directory of <paramref name="path"/>, such as "C:\", or null if <paramref name="path"/> is null, or an empty string if <paramref name="path"/> does not contain root directory information.</returns><param name="path">The path from which to obtain root directory information. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- <see cref="F:System.String.Empty"/> was passed to <paramref name="path"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetTempFileName">
            <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary><returns>A <see cref="T:System.String"/> containing the full path of the temporary file.</returns><exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.GetTempPath">
            <summary>Returns the path of the current system's temporary folder.</summary><returns>A <see cref="T:System.String"/> containing the path information of a temporary directory.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.HasExtension(System.String)">
            <summary>Determines whether a path includes a file name extension.</summary><returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns><param name="path">The path to search for an extension. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:bbv.Common.IO.IPathAccess.IsPathRooted(System.String)">
            <summary>Gets a value indicating whether the specified path string contains absolute or relative path information.</summary><returns>true if <paramref name="path"/> contains an absolute path; otherwise, false.</returns><param name="path">The path to test. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="T:bbv.Common.IO.Internals.DirectoryAccess">
            <summary>
            Wrapper class which simplifies the access to directories.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.#ctor(System.Collections.Generic.IEnumerable{bbv.Common.IO.IDirectoryAccessExtension})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.DirectoryAccess"/> class.
            </summary>
            <param name="extensions">The extensions.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.CreateDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.Delete(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetFiles(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetFiles(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetDirectories(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetAccessControl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetCreationTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetCreationTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetCurrentDirectory">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetDirectories(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetDirectoryRoot(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetFileSystemEntries(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetFileSystemEntries(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetLastAccessTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetLastAccessTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetLastWriteTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetLastWriteTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetLogicalDrives">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.GetParent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.Move(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.SetCurrentDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryAccess.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.DirectoryAccess.Extensions">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.Internals.DirectoryInfoAccess">
            <summary>
            Wrapper class which simplifies the access to directory information.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.Internals.FileSystemInfoAccess`1">
            <summary>
            Abstract file system info access base class.
            </summary>
            <typeparam name="TInfo">The type of the file system info.</typeparam>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.FileSystemInfoAccess`1"/> class.
            </summary>
            <param name="fileSystemInfo">The file system info.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.FileSystemInfoAccess`1"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.Refresh">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.Delete">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">The 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with
            data. 
            </param><param name="context">The destination (see 
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this
            serialization. 
            </param><exception cref="T:System.Security.SecurityException">The caller does
            not have the required permission. 
            </exception>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.CreateObjRef(System.Type)">
            <summary>
            Creates an object that contains all the relevant information required to
            generate a proxy used to communicate with a remote object.
            </summary>
            <param name="requestedType">The <see cref="T:System.Type"/> of the object that
            the new <see cref="T:System.Runtime.Remoting.ObjRef"/> will reference.</param>
            <returns>
            Information required to generate a proxy.
            </returns>
            <exception cref="T:System.Runtime.Remoting.RemotingException">
            This instance is not a valid remoting object.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The immediate caller does not have infrastructure permission.
            </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The immediate caller does not have infrastructure permission.
            </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileSystemInfoAccess`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.CreationTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.Exists">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.FullName">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.Name">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.Attributes">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.Extension">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.LastAccessTime">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.LastAccessTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.LastWriteTime">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.LastWriteTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileSystemInfoAccess`1.FileSystemInfo">
            <summary>
            Gets the file system info.
            </summary>
            <value>The file system info.</value>
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryInfoAccess.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.DirectoryInfoAccess"/> class.
            </summary>
            <param name="directoryInfo">The directory info.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryInfoAccess.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.DirectoryInfoAccess"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryInfoAccess.Create">
            <summary>
            Creates a directory.
            </summary>
            <exception cref="T:System.IO.IOException">The directory cannot be created.</exception>
        </member>
        <member name="M:bbv.Common.IO.Internals.DirectoryInfoAccess.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with
            data.</param>
            <param name="context">The destination (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this
            serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does
            not have the required permission.
            </exception>
        </member>
        <member name="P:bbv.Common.IO.Internals.DirectoryInfoAccess.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
            <value>The parent directory, or null if the path is null or if the file path
            denotes a root (such as "\", "C:", or * "\\server\share").</value>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required
            permission.</exception>
        </member>
        <member name="P:bbv.Common.IO.Internals.DirectoryInfoAccess.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
            <value>A <see cref="T:bbv.Common.IO.IDirectoryInfoAccess"/> object representing the root of a path.</value>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required
            permission.</exception>
        </member>
        <member name="T:bbv.Common.IO.Internals.DriveInfoAccess">
            <summary>
            Wrapper class which simplifies the access to drive information.
            </summary>
        </member>
        <member name="F:bbv.Common.IO.Internals.DriveInfoAccess.driveInfo">
            <summary>
            The wrapped drive info.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.Internals.DriveInfoAccess.#ctor(System.IO.DriveInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.DriveInfoAccess"/> class.
            </summary>
            <param name="driveInfo">The drive info.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.DriveInfoAccess.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.DriveInfoAccess"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.DriveInfoAccess.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">The 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with
            data. 
            </param><param name="context">The destination (see 
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this
            serialization. 
            </param><exception cref="T:System.Security.SecurityException">The caller does
            not have the required permission. 
            </exception>
        </member>
        <member name="M:bbv.Common.IO.Internals.DriveInfoAccess.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives on a computer.
            </summary>
            <returns>An enumerable of type <see cref="T:bbv.Common.IO.IDriveInfoAccess"/> that represents the logical drives on a computer.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:bbv.Common.IO.Internals.DriveInfoAccess.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.Internals.DriveInfoAccess.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Internals.DriveInfoAccess.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:bbv.Common.IO.Internals.DriveInfoAccess.AvailableFreeSpace">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.DriveInfoAccess.DriveFormat">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.DriveInfoAccess.DriveType">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.DriveInfoAccess.IsReady">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.DriveInfoAccess.RootDirectory">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.DriveInfoAccess.TotalFreeSpace">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.DriveInfoAccess.TotalSize">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.DriveInfoAccess.Name">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.DriveUtilities">
            <summary>
            Provides functionality to get drive information.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.DriveUtilities.GetDriveFreeSpace(System.String)">
            <summary>
            Gets the drive free space.
            </summary>
            <param name="driveName">Name of the drive.</param>
            <returns>free space in Byte</returns>
        </member>
        <member name="M:bbv.Common.IO.DriveUtilities.GetTotalDriveSpace(System.String)">
            <summary>
            Gets the total drive space.
            </summary>
            <param name="driveName">Name of the drive.</param>
            <returns>total drive space in Byte</returns>
        </member>
        <member name="M:bbv.Common.IO.DriveUtilities.GetFolderSize(System.String,System.Boolean)">
            <summary>
            Gets the size of the folder.
            </summary>
            <param name="path">The path of the folder</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns>folder size in Byte</returns>
        </member>
        <member name="M:bbv.Common.IO.DriveUtilities.FormatByteSize(System.Double)">
            <summary>
            Transforms the space in Bytes into more Readable form. 
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>Transformed Size.</returns>
        </member>
        <member name="M:bbv.Common.IO.DriveUtilities.GetFolderSizeFlat(System.String)">
            <summary>
            Gets the folder size flat.
            </summary>
            <param name="path">The path of the folder.</param>
            <returns>The flat size of the folder.</returns>
        </member>
        <member name="T:bbv.Common.IO.Internals.FileAccess">
            <summary>
            Wrapper class which simplifies the access to the file layer.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.#ctor(System.Collections.Generic.IEnumerable{bbv.Common.IO.IFileAccessExtension})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.FileAccess"/> class.
            </summary>
            <param name="extensions">The extensions.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Copy(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Copy(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.CreateText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetAttributes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.SetAttributes(System.String,System.IO.FileAttributes)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.ReadAllBytes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.ReadAllLines(System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.ReadAllLines(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.ReadAllText(System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.ReadAllText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.WriteAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.WriteAllBytes(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Open(System.String,System.IO.FileMode)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.AppendAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.AppendText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Create(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Create(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Create(System.String,System.Int32,System.IO.FileOptions)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Decrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Encrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetAccessControl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetCreationTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetCreationTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetLastAccessTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetLastAccessTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetLastWriteTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.GetLastWriteTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Move(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.OpenRead(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.OpenText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.OpenWrite(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Replace(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.Replace(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileAccess.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileAccess.Extensions">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.Internals.FileInfoAccess">
            <summary>
            Wrapper class which simplifies the access to file information.
            </summary>
        </member>
        <member name="F:bbv.Common.IO.Internals.FileInfoAccess.directoryInfo">
            <summary>
            The directory info.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.FileInfoAccess"/> class.
            </summary>
            <param name="fileInfo">The file info.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.FileInfoAccess"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.AppendText">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.CopyTo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.CopyTo(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.Create">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.CreateText">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.Decrypt">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.Encrypt">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.GetAccessControl">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.MoveTo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.Open(System.IO.FileMode)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.Open(System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.OpenRead">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.OpenText">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.OpenWrite">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.Replace(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.Replace(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.FileInfoAccess.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with
            data.</param>
            <param name="context">The destination (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this
            serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does
            not have the required permission.
            </exception>
        </member>
        <member name="P:bbv.Common.IO.Internals.FileInfoAccess.Directory">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileInfoAccess.DirectoryName">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileInfoAccess.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.FileInfoAccess.Length">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.FilesystemHelper">
            <summary>
            Contains static methods to get informations about Filesystem.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.FilesystemHelper.ConvertBytes(System.Double,bbv.Common.IO.FilesystemHelper.ByteUnit)">
            <summary>
            Converts a byte value into the requested <see cref="T:bbv.Common.IO.FilesystemHelper.ByteUnit"/>.
            </summary>
            <param name="bytes">The byte value to convert.</param>
            <param name="unit">The <see cref="T:bbv.Common.IO.FilesystemHelper.ByteUnit"/> to convert into.</param>
            <returns>
            Returns a double value in the <see cref="T:bbv.Common.IO.FilesystemHelper.ByteUnit"/> requested by the caller.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception will be thrown if the <see cref="T:bbv.Common.IO.FilesystemHelper.ByteUnit"/> enumeration 
            was out of the defined range.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.FilesystemHelper.GetDiskFreeSpace(System.String)">
            <summary>
            Gets the free space left on the disk given by a directory.
            </summary>
            <param name="directory">Directory where the free disk space should be counted.</param>
            <returns>
            Returns the free disk space in bytes, that can be converted by the 
            <see cref="M:bbv.Common.IO.FilesystemHelper.ConvertBytes(System.Double,bbv.Common.IO.FilesystemHelper.ByteUnit)"/> method or by calling the overloaded 
            version of this method.
            </returns>
        </member>
        <member name="M:bbv.Common.IO.FilesystemHelper.GetDiskFreeSpace(System.String,bbv.Common.IO.FilesystemHelper.ByteUnit)">
            <summary>
            Overloaded method that gets the free space left on the disk given by a directory.
            </summary>
            <param name="directory">Directory where the free disk space should be counted.</param>
            <param name="unit">The <see cref="T:bbv.Common.IO.FilesystemHelper.ByteUnit"/> in which the result should be returned.</param>
            <returns>
            Returns the free disk space in the requested unit, i.e. MegaBytes / GigaBytes and so on.
            </returns>
        </member>
        <member name="M:bbv.Common.IO.FilesystemHelper.NormalizeDirectory(System.String)">
            <summary>
            Adds a "\" to the directory if there is none.
            </summary>
            <param name="directory">The directory to normalize.</param>
            <returns>
            Returns the normalized directory always ending with a "\".
            </returns>
        </member>
        <member name="T:bbv.Common.IO.FilesystemHelper.ByteUnit">
            <summary>
            Specifies the unit for converting from i.e. Bytes to MegaBytes.
            </summary>
            <remarks>
            The values are tightly coupled to the <see cref="M:bbv.Common.IO.FilesystemHelper.ConvertBytes(System.Double,bbv.Common.IO.FilesystemHelper.ByteUnit)"/> method!
            </remarks>
        </member>
        <member name="F:bbv.Common.IO.FilesystemHelper.ByteUnit.Bytes">
            <summary>
            Unit is byte
            </summary>
        </member>
        <member name="F:bbv.Common.IO.FilesystemHelper.ByteUnit.Kilobytes">
            <summary>
            Unit is Kilobytes
            </summary>
        </member>
        <member name="F:bbv.Common.IO.FilesystemHelper.ByteUnit.Megabytes">
            <summary>
            Unit is Megabytes
            </summary>
        </member>
        <member name="F:bbv.Common.IO.FilesystemHelper.ByteUnit.Gigabytes">
            <summary>
            Unit is Gigabytes
            </summary>
        </member>
        <member name="T:bbv.Common.IO.FolderWatcher">
            <summary>
            Observes a folder for file changes. Filters frequent file changed event from file system with an <see cref="T:bbv.Common.Events.IEventFilter`1"/>.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.IFolderWatcher">
            <summary>
            Observes a folder for file changes.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcher.StartObservation">
            <summary>
            Starts the observation of the given directory for new and changed files.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcher.StopObservation">
            <summary>
            Stops the observation.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcher.GetCurrentAvailableFiles">
            <summary>
            Gets the current available files stored in the defined folder and matching to the filter criteria.
            </summary>
            <returns>A list of all available files in the monitored folder and matching to the given filter</returns>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcher.AddExtension(bbv.Common.IO.IFolderWatcherExtension)">
            <summary>
            Adds the extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcher.RemoveExtension(bbv.Common.IO.IFolderWatcherExtension)">
            <summary>
            Removes the extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:bbv.Common.IO.IFolderWatcher.ClearExtensions">
            <summary>
            Clears all extensions.
            </summary>
        </member>
        <member name="E:bbv.Common.IO.IFolderWatcher.FileChanged">
            <summary>
            Occurs when a new file is recognized or a file is changed. The event arguments contains the found path.
            </summary>
        </member>
        <member name="P:bbv.Common.IO.IFolderWatcher.Folder">
            <summary>
            Gets or sets the folder which will be observed.
            </summary>
            <value>The folder.</value>
        </member>
        <member name="P:bbv.Common.IO.IFolderWatcher.Filter">
            <summary>
            Gets or sets the filter it is a normal file system filter string like "*.txt".
            </summary>
            <value>The filter.</value>
        </member>
        <member name="F:bbv.Common.IO.FolderWatcher.FilterTimeWindow">
            <summary>
            The <see cref="T:bbv.Common.Events.EventFilter`1"/> timeout.
            </summary>
        </member>
        <member name="F:bbv.Common.IO.FolderWatcher.eventFilter">
            <summary>
            Filters the original <see cref="T:System.IO.FileSystemWatcher"/> events to prevent to much events for the user of the <see cref="T:bbv.Common.IO.FolderWatcher"/>.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.FolderWatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FolderWatcher"/> class.
            </summary>
            <remarks>Folder and Filter must be set from outside.</remarks>
        </member>
        <member name="M:bbv.Common.IO.FolderWatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.FolderWatcher"/> class.
            </summary>
            <param name="folder">The folder.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:bbv.Common.IO.FolderWatcher.AddExtension(bbv.Common.IO.IFolderWatcherExtension)">
            <summary>
            Adds the extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:bbv.Common.IO.FolderWatcher.RemoveExtension(bbv.Common.IO.IFolderWatcherExtension)">
            <summary>
            Removes the extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:bbv.Common.IO.FolderWatcher.ClearExtensions">
            <summary>
            Clears all extensions.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.FolderWatcher.StartObservation">
            <summary>
            Initialize the file watcher who are observing the given directory for new files
            </summary>
        </member>
        <member name="M:bbv.Common.IO.FolderWatcher.StopObservation">
            <summary>
            Stops the observation.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.FolderWatcher.GetCurrentAvailableFiles">
            <summary>
            Gets the current available files stored in the defined folder and matching to the filter criteria.
            </summary>
            <returns>A list of all available files in the monitored folder and matching to the given filter</returns>
        </member>
        <member name="E:bbv.Common.IO.FolderWatcher.FileChanged">
            <summary>
            Occurs when a new file is recognized. The event arguments contains the found filename.
            </summary>
        </member>
        <member name="P:bbv.Common.IO.FolderWatcher.Folder">
            <summary>
            Gets or sets the folder which will be observed.
            </summary>
            <value>The folder.</value>
        </member>
        <member name="P:bbv.Common.IO.FolderWatcher.Filter">
            <summary>
            Gets or sets the filter. It is a file system filter string like "*.txt".
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:bbv.Common.IO.IOAccessFactory">
            <summary>
            The IO access factory which implements <see cref="T:bbv.Common.IO.IIOAccessFactory"/>.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreateDirectoryAccess">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreateFileAccess">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreatePathAccess">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreateFileInfo(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreateFileInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreateDirectoryInfo(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreateDirectoryInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreateDriveInfo(System.IO.DriveInfo)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.CreateDriveInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.RegisterFileAccessExtensionsProvider(System.Func{System.Collections.Generic.IEnumerable{bbv.Common.IO.IFileAccessExtension}})">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.RegisterDirectoryAccessExtensionsProvider(System.Func{System.Collections.Generic.IEnumerable{bbv.Common.IO.IDirectoryAccessExtension}})">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.IOAccessFactory.RegisterPathAccessExtensionsProvider(System.Func{System.Collections.Generic.IEnumerable{bbv.Common.IO.IPathAccessExtension}})">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.ITextReader">
            <summary>
            Contains methods to read input data into a string or a stream.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.ITextReader.GetString">
            <summary>
            Reads the complete input data as string.
            </summary>
            <returns>The data as a string.</returns>
        </member>
        <member name="M:bbv.Common.IO.ITextReader.GetStream">
            <summary>
            Gets the stream of the input data.
            </summary>
            <returns>The data as a stream.</returns>
        </member>
        <member name="T:bbv.Common.IO.ITextWriter">
            <summary>
            Contains methods to write text to the specified output.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.ITextWriter.Write(System.String)">
            <summary>
            Writes the text to the specified output.
            </summary>
            <param name="content">The filecontent.</param>
        </member>
        <member name="M:bbv.Common.IO.ITextWriter.Write(System.IO.Stream,System.Int32)">
            <summary>
            Writes the stream to the specified output.
            </summary>
            <param name="stream">The stream.</param>
            <param name="bufferSize">The size of the buffer.</param>
        </member>
        <member name="T:bbv.Common.IO.Internals.PathAccess">
            <summary>
            Wrapper class which simplifies access to paths.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.#ctor(System.Collections.Generic.IEnumerable{bbv.Common.IO.IPathAccessExtension})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.Internals.PathAccess"/> class.
            </summary>
            <param name="extensions">The extensions.</param>
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetDirectoryName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetFileName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetFileNameWithoutExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.Combine(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetRandomFileName">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.ChangeExtension(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetFullPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetInvalidFileNameChars">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetInvalidPathChars">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetPathRoot(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetTempFileName">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.GetTempPath">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.HasExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:bbv.Common.IO.Internals.PathAccess.IsPathRooted(System.String)">
            <inheritdoc />
        </member>
        <member name="P:bbv.Common.IO.Internals.PathAccess.Extensions">
            <inheritdoc />
        </member>
        <member name="T:bbv.Common.IO.NumberOfDirsAndFiles">
            <summary>
            Calculates how many files and directories are in the tree.
            </summary>
            <example>
            Normally use static method on <see cref="M:bbv.Common.IO.FileActionCommand.NumberOfDirsAndFiles(System.String)"/>:
            <code>
            int nrOfFilesAndDirectories = FileActionCommand.NumberOfDirsAndFiles(sourcePath, searchPattern, excludeDirs);
            </code>
            In special cases you may use:
            <code>
            NumberOfDirsAndFiles nof = new NumberOfDirsAndFiles(sourcePath, searchPattern, excludeDirs);
            nof.ExecuteRecursiv(sourcePath);
            int nrOfFilesAndDirectories = nof.Count;
            </code>
            </example>
        </member>
        <member name="M:bbv.Common.IO.NumberOfDirsAndFiles.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.NumberOfDirsAndFiles"/> class.
            </summary>
            <param name="sourcePath">Source Path at which to start to move.</param>
        </member>
        <member name="M:bbv.Common.IO.NumberOfDirsAndFiles.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.NumberOfDirsAndFiles"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="searchPattern">
            Only files that match this pattern are taken for the command.
            </param>
        </member>
        <member name="M:bbv.Common.IO.NumberOfDirsAndFiles.#ctor(System.String,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.NumberOfDirsAndFiles"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
        </member>
        <member name="M:bbv.Common.IO.NumberOfDirsAndFiles.#ctor(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.NumberOfDirsAndFiles"/> class. 
            Constructor
            </summary>
            <param name="sourcePath">
            Source Path at which to start to move.
            </param>
            <param name="searchPattern">
            Only files that match this pattern are taken for the command.
            </param>
            <param name="excludeDirs">
            Directories to exclude from move.
            </param>
        </member>
        <member name="M:bbv.Common.IO.NumberOfDirsAndFiles.ExecuteRecursiv(System.String)">
            <summary>
            Called for each directory in the source path -> Count + 1
            </summary>
            <param name="path">The full path.</param>
        </member>
        <member name="M:bbv.Common.IO.NumberOfDirsAndFiles.FileAction(System.String)">
            <summary>
            Called each time a file is found -> Count + 1
            </summary>
            <param name="fileName">Found file</param>
        </member>
        <member name="P:bbv.Common.IO.NumberOfDirsAndFiles.Count">
            <summary>
            Gets number of files and directories in tree.
            </summary>
        </member>
        <member name="T:bbv.Common.IO.ObserveFolder">
            <summary>
            The folder observer.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.ObserveFolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.ObserveFolder"/> class.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.ObserveFolder.#ctor(System.Func{bbv.Common.IO.IFolderWatcher})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.ObserveFolder"/> class.
            </summary>
            <param name="folderWatcherFactory">The folder watcher factory.</param>
        </member>
        <member name="M:bbv.Common.IO.ObserveFolder.Start(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Starts the observation on the given folder with the specified filter. When a file changed in the observed folder
            the observation is stopped and the file's path is returned as result of the task.
            </summary>
            <param name="folder">The folder to be observed.</param>
            <param name="filter">The filter to be used.</param>
            <param name="cancellationToken">The cancellation token which allows to stop the observation.</param>
            <returns>
            The fully qualified path to the changed file.
            </returns>
        </member>
        <member name="T:bbv.Common.IO.Resources.EmbeddedResourceLoader">
            <summary>
            Implements the <see cref="T:bbv.Common.IO.Resources.IResourceLoader"/> to load embedded resources from assemblies
            </summary>
        </member>
        <member name="T:bbv.Common.IO.Resources.IResourceLoader">
            <summary>
            Provides functionality to load resources.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.Resources.IResourceLoader.LoadResourceAsXml(System.Type,System.String)">
            <summary>
            Loads an XML file into an <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="type">The type to find the assembly and namespace containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>.</param>
            <returns>A <see cref="T:System.Xml.XPath.IXPathNavigable"/> containing the contents of the embedded XML file</returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.IResourceLoader.LoadResourceAsXml(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded XML file into a<see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>
            A<see cref="T:System.Xml.XPath.IXPathNavigable"/>containing the contents of the embedded XML file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.IResourceLoader.LoadResourceAsString(System.Type,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.String"/>
            </summary>
            <param name="type">The type to find the assembly containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>.</param>
            <returns>A <see cref="T:System.String"/> containing the contents of the embedded resource file</returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.IResourceLoader.LoadResourceAsString(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.String"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>A <see cref="T:System.String"/> containing the contents of the embedded resource file</returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.IResourceLoader.LoadResourceAsStream(System.Type,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="type">The type to find the assembly containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>./// </param>
            <returns>A <see cref="T:System.IO.Stream"/> containing the contents of the embedded resource file</returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.IResourceLoader.LoadResourceAsStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>A <see cref="T:System.IO.Stream"/> containing the contents of the embedded resource file</returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.EmbeddedResourceLoader.LoadResourceAsXml(System.Type,System.String)">
            <summary>
            Loads an XML file into an <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="type">The type to find the assembly and namespace containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>.</param>
            <returns>
            A <see cref="T:System.Xml.XPath.IXPathNavigable"/> containing the contents of the embedded XML file
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="resourceName"/> does not exist</exception>
        </member>
        <member name="M:bbv.Common.IO.Resources.EmbeddedResourceLoader.LoadResourceAsXml(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded XML file into a<see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>
            A<see cref="T:System.Xml.XPath.IXPathNavigable"/>containing the contents of the embedded XML file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.EmbeddedResourceLoader.LoadResourceAsString(System.Type,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.String"/>
            </summary>
            <param name="type">The type to find the assembly containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>.</param>
            <returns>
            A <see cref="T:System.String"/> containing the contents of the embedded resource file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.EmbeddedResourceLoader.LoadResourceAsString(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.String"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>
            A <see cref="T:System.String"/> containing the contents of the embedded resource file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.EmbeddedResourceLoader.LoadResourceAsStream(System.Type,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="type">The type to find the assembly containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>.///</param>
            <returns>
            A <see cref="T:System.IO.Stream"/> containing the contents of the embedded resource file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.EmbeddedResourceLoader.LoadResourceAsStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>
            A <see cref="T:System.IO.Stream"/> containing the contents of the embedded resource file
            </returns>
        </member>
        <member name="T:bbv.Common.IO.Resources.FileResourceLoader">
            <summary>
            Implements the <see cref="T:bbv.Common.IO.Resources.IResourceLoader"/> to load resources from file system
            </summary>
        </member>
        <member name="M:bbv.Common.IO.Resources.FileResourceLoader.LoadResourceAsXml(System.Type,System.String)">
            <summary>
            Loads an XML file into an <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="type">The type to find the assembly and namespace containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>.</param>
            <returns>
            A <see cref="T:System.Xml.XPath.IXPathNavigable"/> containing the contents of the embedded XML file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.FileResourceLoader.LoadResourceAsXml(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded XML file into a<see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>
            A<see cref="T:System.Xml.XPath.IXPathNavigable"/>containing the contents of the embedded XML file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.FileResourceLoader.LoadResourceAsString(System.Type,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.String"/>
            </summary>
            <param name="type">The type to find the assembly containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>.</param>
            <returns>
            A <see cref="T:System.String"/> containing the contents of the embedded resource file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.FileResourceLoader.LoadResourceAsString(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.String"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>
            A <see cref="T:System.String"/> containing the contents of the embedded resource file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.FileResourceLoader.LoadResourceAsStream(System.Type,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="type">The type to find the assembly containing the resource</param>
            <param name="resourceName">The name of the resource relative to the namespace of <paramref name="type"/>.///</param>
            <returns>
            A <see cref="T:System.IO.Stream"/> containing the contents of the embedded resource file
            </returns>
        </member>
        <member name="M:bbv.Common.IO.Resources.FileResourceLoader.LoadResourceAsStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded file into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="assembly">The Assembly to look for the resource.</param>
            <param name="resourceName">The full name including the namespace of the resource.</param>
            <returns>
            A <see cref="T:System.IO.Stream"/> containing the contents of the embedded resource file
            </returns>
        </member>
        <member name="T:bbv.Common.IO.StreamDecoratorStream">
            <summary>
            Abstract decorator class for a Stream
            </summary>
            <remarks>
            <para>
            This class is used to implement stream decorator classes.
            For creating a new stream decorator derive a new class from this one and override
            the methods that you want to decorate. All methods that are not overwritten
            are passed to the decorated stream.
            </para>
            <para>
            All methods throw a NoStreamException when no stream is assigned to this class
            at the time a method is called.
            </para>
            </remarks>
        </member>
        <member name="F:bbv.Common.IO.StreamDecoratorStream.decoratedStream">
            <summary>
            The decorated stream
            </summary>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.StreamDecoratorStream"/> class.
            </summary>
            <param name="decoratedStream">The decorated stream.</param>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request 
            from other requests.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"></see> that represents the asynchronous read, which could still be 
            pending.
            </returns>
            <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error 
            occurs. </exception>
            <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read 
            operation. </exception>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. 
            Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one 
            byte is available.
            </returns>
            <exception cref="T:System.ArgumentException">asyncResult did not originate from a 
            <see cref="M:bbv.Common.IO.StreamDecoratorStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            </see> method on the current stream.</exception>
            <exception cref="T:System.ArgumentNullException">asyncResult is null. </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the 
            position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte 
            array with the values between offset and (offset + count - 1) replaced by the bytes read from the current 
            source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from 
            the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if 
            that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.
            </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at 
            the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request 
            from other requests.</param>
            <returns> An IAsyncResult that represents the asynchronous write, which could still be pending.</returns>
            <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write 
            operation. </exception>
            <exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, 
            or a disk error occurs. </exception>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
            <exception cref="T:System.ArgumentNullException">asyncResult is null. </exception>
            <exception cref="T:System.ArgumentException">asyncResult did not originate from a 
            <see cref="M:bbv.Common.IO.StreamDecoratorStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>
            method on the current stream. </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the 
            current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.
            </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current 
            stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already 
            closed. </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with 
            the current stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to 
            be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference 
            point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream 
            is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, 
            such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.ThrowNoStreamException">
            <summary>
            Derived classes can override this method to handle cases where a method is called while the decorated 
            device is not assigned.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.SetStream(System.IO.Stream)">
            <summary>
            Sets the stream that shall be decorated.
            </summary>
            <param name="stream">The stream that shall be decorated.</param>
        </member>
        <member name="M:bbv.Common.IO.StreamDecoratorStream.AssertStreamNotNull">
            <summary>
            Asserts the stream is not null.
            </summary>
        </member>
        <member name="P:bbv.Common.IO.StreamDecoratorStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="P:bbv.Common.IO.StreamDecoratorStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="P:bbv.Common.IO.StreamDecoratorStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="P:bbv.Common.IO.StreamDecoratorStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Property was called after the stream was closed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="P:bbv.Common.IO.StreamDecoratorStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="P:bbv.Common.IO.StreamDecoratorStream.ReadTimeout">
            <summary>
            Gets or sets a value that determines how long the stream will attempt to read before timing out.
            </summary>
            <value></value>
            <returns>A value that determines how long the stream will attempt to read before timing out.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="P:bbv.Common.IO.StreamDecoratorStream.WriteTimeout">
            <summary>
            Gets or sets a value that determines how long the stream will attempt to write before timing out.
            </summary>
            <value></value>
            <returns>A value that determines how long the stream will attempt to write before timing out.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no stream is assigned as decorated stream.
            </exception>
        </member>
        <member name="T:bbv.Common.IO.StreamHelper">
            <summary>
            Class to help with stream handling that is not covered by .NET.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.StreamHelper.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the input stream to the output stream.
            </summary>
            <param name="input">The input stream.</param><param name="output">The output stream.</param><exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="output"/> are null.
            </exception><exception cref="T:System.ArgumentException"><paramref name="input"/>is not readable or <paramref name="output"/> is
            not writable.</exception>
        </member>
        <member name="M:bbv.Common.IO.StreamHelper.CompareStreamContents(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compares the contents of the streams given.
            </summary>
            <param name="expected">The expected.</param><param name="actual">The actual.</param><returns>
            True if the stream contents are equal, else false.
            </returns>
        </member>
        <member name="T:bbv.Common.IO.TextFileReader">
            <summary>
            Contains methods to read a file into a string or into a stream.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.TextFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.TextFileReader"/> class.
            </summary>
            <param name="path">The path of the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>is null</exception>
        </member>
        <member name="M:bbv.Common.IO.TextFileReader.GetString">
            <summary>
            Gets the content of the file as string.
            </summary>
            <returns>The file as a string.</returns>
        </member>
        <member name="M:bbv.Common.IO.TextFileReader.GetStream">
            <summary>
            Gets the stream of the file.
            </summary>
            <returns>The file as a stream.</returns>
        </member>
        <member name="T:bbv.Common.IO.TextFileWriter">
            <summary>
            Contains methods to write a text to the specified file.
            </summary>
        </member>
        <member name="M:bbv.Common.IO.TextFileWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.IO.TextFileWriter"/> class.
            </summary>
            <param name="path">The path to write the text into.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>is null</exception>
        </member>
        <member name="M:bbv.Common.IO.TextFileWriter.Write(System.String)">
            <summary>
            Writes the the to a specified file.
            </summary>
            <param name="content">The filecontent.</param>
        </member>
        <member name="M:bbv.Common.IO.TextFileWriter.Write(System.IO.Stream,System.Int32)">
            <summary>
            Writes the stream to the specified output.
            </summary>
            <param name="stream">The stream.</param>
            <param name="bufferSize">The size of the buffer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>If not greater than 0.</exception>
        </member>
        <member name="P:bbv.Common.IO.TextFileWriter.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <value>The encoding.</value>
        </member>
    </members>
</doc>
